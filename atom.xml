<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lemur‘s blog</title>
  
  <subtitle>Lemur的个人博客</subtitle>
  <link href="http://lemur9.top/atom.xml" rel="self"/>
  
  <link href="http://lemur9.top/"/>
  <updated>2023-08-27T19:26:59.663Z</updated>
  <id>http://lemur9.top/</id>
  
  <author>
    <name>Lemur</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>配置logback</title>
    <link href="http://lemur9.top/2023/08/27/HTML/"/>
    <id>http://lemur9.top/2023/08/27/HTML/</id>
    <published>2023-08-27T12:18:15.000Z</published>
    <updated>2023-08-27T19:26:59.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、HTML-初体验"><a href="#一、HTML-初体验" class="headerlink" title="一、HTML 初体验"></a>一、HTML 初体验</h1><ul><li>HTML 概念</li><li>HTML 语法</li></ul><h2 id="HTML-定义"><a href="#HTML-定义" class="headerlink" title="HTML 定义"></a>HTML 定义</h2><p>HTML 超文本标记语言——HyperText Markup Language</p><ul><li>超文本是什么？<code>链接</code></li><li>标记是什么？<code>标记也叫标签，带尖括号的文本</code></li></ul><h2 id="标签语法"><a href="#标签语法" class="headerlink" title="标签语法"></a>标签语法</h2><ul><li>标签成对出现，中间包裹内容</li><li>&lt;&gt;里面放英文字母（标签名）</li><li>结束标签比开始标签多 &#x2F;</li><li>拓展<ul><li><strong>双标签</strong>：成对出现的标签</li><li><strong>单标签</strong>：只有开始标签，没有结束标签</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>保存 HTML 标签的文件扩展名是什么？<br>.html</li><li>HTML 标签名要放到什么括号里面？<br>尖括号&lt;&gt;</li><li>结束标签比开始标签多什么？<br>&#x2F;</li><li>标签包裹的内容放在什么位置？<br>开始标签和结束标签之间</li></ol><h1 id="二、HTML-基本骨架"><a href="#二、HTML-基本骨架" class="headerlink" title="二、HTML 基本骨架"></a>二、HTML 基本骨架</h1><ul><li>html：整个网页</li><li>head：网页头部，用来存放给浏览器看的信息，例如CSS<ul><li>title：网页标题</li><li>meta：特殊信息</li><li>style： 定义元素的CSS样式</li><li>script： 定义JavaScript代码，也可以引入外部JavaScript文件</li><li>link： 引入外部样式文件（CSS文件）</li><li>base：暂时忽略</li></ul></li><li>body：网页主体，用来存放给用户看的信息，例如图片、文字</li></ul><p>meta标签有两个重要的属性：name和http-equiv。</p><p>总结meta标签name属性的几个取值。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>keywords</td><td>网页的关键字，可以是多个</td></tr><tr><td>description</td><td>网页的描述</td></tr><tr><td>author</td><td>网页的作者</td></tr><tr><td>copyright</td><td>版权信息</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码告诉浏览器，该页面使用的编码是utf-8，在html5标准中，可简写为：&lt;meta charset&#x3D;”UTF-8”&gt;</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ol><li><p>VS Code 生成 HTML 骨架的符号是什么？<br> <strong>!</strong> （英文）配合 Enter 或 Tab</p></li><li><p>HTML 骨架标签包含哪些？</p></li></ol><p>  <strong>html</strong>          整个网页<br>  <strong>head</strong>         网页头部<br>  <strong>title</strong>          网页标题<br>  <strong>body</strong>         网页主体</p><h1 id="三、标签的关系"><a href="#三、标签的关系" class="headerlink" title="三、标签的关系"></a>三、标签的关系</h1><p>作用：明确标签的书写位置；让代码格式更整齐</p><ul><li><p>父子关系（嵌套关系）</p></li><li><p>兄弟关系（并列关系）</p></li></ul><p>代码格式</p><p>​父子关系：子级标签换行且缩进（Tab键）</p><p>​兄弟关系：兄弟标签换行要对齐</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ol><li>标签之间有几种关系？分别是什么关系？</li></ol><p>  两种</p><p>  父子关系（嵌套）<br>  兄弟关系（并列）</p><ol start="2"><li><p>说出下列标签之间的关系</p><blockquote><html><body></body></html>父子关系</blockquote><blockquote><head></head><body></body>兄弟关系</blockquote></li><li><p>开发中，不同关系的标签的对齐方式是什么？<br> 父子关系：<code>子级标签换行且缩进</code><br> 兄弟关系：<code>兄弟标签换行要对齐</code></p></li></ol><h1 id="四、注释"><a href="#四、注释" class="headerlink" title="四、注释"></a>四、注释</h1><p>注释就是对代码的解释和说明，其目的是让人们能够更加轻松地了解代码。注释是编写程序时，写程序的人给一个语句、程序段、函数等的解释或提示，能提高程序代码的可读性。<br>        在编写HTML代码时，我们经常要在一些关键代码旁做一下注释，这样做的好处很多，比如：方便理解、方便查找或方便项目组里的其它程序员了解你的代码，而且可以方便以后你对自己代码进行修改。<br>        <strong>学习和工作中，关键代码都要加注释</strong></p><!--...-->注释标签用来在源文档中插入注释，注释不会在浏览器中显示。<p><strong>在 VS Code 中，添加 &#x2F; 删除注释的快捷键：Ctrl + &#x2F;</strong></p><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><ol><li>在 VS Code 中，添加&#x2F;删除注释的快捷键是什么？<br>Ctrl + &#x2F;</li><li>浏览器会展示注释的内容吗？<br>不显示注释的内容</li></ol><h1 id="五、标题标签"><a href="#五、标题标签" class="headerlink" title="五、标题标签"></a>五、标题标签</h1><p>一般用在新闻标题、文章标题、网页区域名称、产品名称等等。</p><p>标签名：<strong>h1 ~ h6（双标签）</strong></p><p>显示特点：</p><ul><li>文字加粗</li><li>字号逐渐减小</li><li>独占一行（换行）</li></ul><p>经验分享：</p><ul><li>**h1 标签在一个网页中&#x3D;&#x3D;只能用一次&#x3D;&#x3D;**，用来放新闻标题或网页的 logo</li><li>h2 ~ h6 没有使用次数的限制</li></ul><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><ol><li>标题标签一共有几级别？标签名分别是什么？</li></ol><p>  六级<br>  h1 ~ h6</p><ol start="2"><li><p>在浏览器中，各个标题标签的显示效果有什么特点？<br> 文字加粗<br> 字号逐渐减小<br> 独占一行</p></li><li><p>哪个标题标签有使用次数的限制？<br> <strong>h1</strong>：<strong>一个网页就用一次，用来放新闻标题或网页 Logo</strong></p></li></ol><h1 id="六、段落标签"><a href="#六、段落标签" class="headerlink" title="六、段落标签"></a>六、段落标签</h1><p>一般用在新闻段落、文章段落、产品描述信息等等。</p><p>标签名：p（双标签）</p><p>显示特点：</p><ul><li>独占一行</li><li>段落之间存在间隙</li></ul><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><ol><li>段落标签名是什么？<br>p（双标签）</li><li>在浏览器中，段落标签的显示效果是什么？<br>独占一行<br>段落之间有间隙</li></ol><h1 id="七、换行与水平线标签"><a href="#七、换行与水平线标签" class="headerlink" title="七、换行与水平线标签"></a>七、换行与水平线标签</h1><p>换行：**&lt;br&gt;**（单标签）</p><p>水平线：**&lt;hr&gt;**（单标签）</p><h2 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h2><ol><li><p>代码中敲 Enter 换行，在浏览器中有换行的效果吗？<br> <strong>没有换行效果</strong></p></li><li><p>强制换行的标签是什么？<br> &lt;br&gt; 单标签</p></li><li><p>水平线标签是什么？</p><p>&lt;hr&gt; 单标签</p></li></ol><h1 id="八、文本格式化标签"><a href="#八、文本格式化标签" class="headerlink" title="八、文本格式化标签"></a>八、文本格式化标签</h1><p>作用：为文本添加特殊格式，以突出重点。常见的文本格式：<strong>加粗</strong>、<em>倾斜</em>、<u>下划线</u>、<del>删除线</del>等。</p><p><img src="/2023/08/27/HTML/image-20230827204106522.png" alt="image-20230827204106522"></p><p>strong、em、ins、del 标签自带强调含义（语义）。</p><h2 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h2><ol><li>两个文本格式化标签是换行还是在一行显示？<br>在一行显示</li><li>下列标签的作用分别是什么？<br>strong     加粗<br>em             倾斜</li></ol><h1 id="九、图像标签"><a href="#九、图像标签" class="headerlink" title="九、图像标签"></a>九、图像标签</h1><h2 id="图像标签-基本使用"><a href="#图像标签-基本使用" class="headerlink" title="图像标签 - 基本使用"></a>图像标签 - 基本使用</h2><p>作用：在网页中插入图片。</p><p>&lt;img src&#x3D;”图片的 URL”&gt;</p><p><strong>src</strong>用于<strong>指定图像的位置和名称</strong>，是 &lt;img&gt; 的<strong>必须属性</strong>。</p><h2 id="图像标签-属性"><a href="#图像标签-属性" class="headerlink" title="图像标签 - 属性"></a>图像标签 - 属性</h2><p><img src="/2023/08/27/HTML/image-20230827204424816.png" alt="image-20230827204424816"></p><p><code>&lt;img src=&quot;./cat.jpg&quot; alt=&quot;替换文本&quot; title=&quot;提示文本&quot;&gt;</code></p><ul><li>属性名&#x3D;”属性值”</li><li>属性写在<strong>尖括号里面</strong>，<strong>标签名后面</strong>，标签名和属性之间用<strong>空格</strong>隔开，不区分先后顺序</li></ul><h2 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h2><ol><li>在网页中，嵌入图片的标签是什么？<br>&lt;img&gt; 单标签</li><li>图像标签的必须属性是什么？作用是什么？<br> src，用来指定图像的位置和名称<br> &lt;img src&#x3D;”图片的 URL”&gt;</li></ol><p>  以 .&#x2F; 开头，VS Code 有提示功能</p><h1 id="十、路径"><a href="#十、路径" class="headerlink" title="十、路径"></a>十、路径</h1><p>路径指的是查找文件时，从<strong>起点到终点</strong>经历的路线。</p><p>路径分类：</p><ul><li>相对路径：从<strong>当前文件位置</strong>出发查找目标文件</li><li>绝对路径：从<strong>盘符</strong>出发查找目标文件<ul><li>Windows 电脑从盘符出发</li><li>Mac 电脑从根目录出发</li></ul></li></ul><h2 id="相对路径-从当前文件位置出发查找目标文件"><a href="#相对路径-从当前文件位置出发查找目标文件" class="headerlink" title="相对路径 - 从当前文件位置出发查找目标文件"></a>相对路径 - 从当前文件位置出发查找目标文件</h2><p>&#x2F; 表示<strong>进入某个文件夹里面</strong>         文件夹名字&#x2F;</p><p>. 表示<strong>当前</strong>文件所在文件夹                      .&#x2F;</p><p>.. 表示当前文件的<strong>上一级</strong>文件夹           ..&#x2F;</p><h2 id="绝对路径-从盘符出发查找目标文件"><a href="#绝对路径-从盘符出发查找目标文件" class="headerlink" title="绝对路径 - 从盘符出发查找目标文件"></a>绝对路径 - 从盘符出发查找目标文件</h2><ul><li><p>Windows 电脑从<strong>盘符</strong>出发</p></li><li><p>Mac 电脑从<strong>根目录</strong>（&#x2F;）出发</p><p><code>&lt;img src=&quot;C:\images\mao.jpg&quot;&gt;</code></p></li><li><p>Windows 默认是 \ ，其他系统是 &#x2F;，建议统一写为 <strong>&#x2F;</strong></p></li><li><p>文件的在线网址：<a href="https://www.itheima.com/images/logo.png">https://www.itheima.com/images/logo.png</a></p></li><li><p>绝对路径的应用场景：友情链接</p></li></ul><p><img src="/2023/08/27/HTML/image-20230827205109181.png" alt="image-20230827205109181"></p><h2 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h2><ol><li>在路径写法中，以下符号表示什么含义？<br>.当前文件所在文件夹<br>..   当前文件上一级文件夹<br>&#x2F;                             进入某个文件夹里面</li></ol><h1 id="十一、超链接"><a href="#十一、超链接" class="headerlink" title="十一、超链接"></a>十一、超链接</h1><p>作用：点击跳转到其他页面。</p><p><code>&lt;a href=&quot;https://www.baidu.com&quot;&gt;跳转到百度&lt;/a&gt;</code></p><p><strong>href</strong> 属性值是<strong>跳转地址</strong>，是超链接的<strong>必须属性</strong>。</p><p>超链接默认是在当前窗口跳转页面，添加 <strong>target&#x3D;”_blank”</strong> 实现<strong>新窗口</strong>打开页面。</p><p><img src="/2023/08/27/HTML/image-20230827211144351.png" alt="image-20230827211144351"></p><p>拓展：开发初期，不确定跳转地址，则 href 属性值写为 <strong>#<strong>，表示</strong>空链接</strong>，页面不会跳转，在当前页面刷新一次。</p><h2 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h2><ol><li><p>超链接标签的作用是什么？<br> 单击跳转到其他页面</p></li><li><p>开发初期，不确定跳转地址，如何书写 href 属性值？</p><p>#      空链接</p></li><li><p>target&#x3D;“_blank” 属性的作用是什么？<br>在<strong>新窗口</strong>打开页面</p></li></ol><h1 id="十二、音频标签"><a href="#十二、音频标签" class="headerlink" title="十二、音频标签"></a>十二、音频标签</h1><p><code>&lt;audio src=&quot;音频的 URL&quot;&gt;&lt;/audio&gt;</code></p><p>常见属性</p><p><img src="/2023/08/27/HTML/image-20230827205736288.png" alt="image-20230827205736288"></p><p>拓展：书写 HTML5 属性时，如果<strong>属性名和属性值相同</strong>，可以简写为<strong>一个</strong>单词。</p><h1 id="十三、视频标签"><a href="#十三、视频标签" class="headerlink" title="十三、视频标签"></a>十三、视频标签</h1><p><code>&lt;video src=&quot;视频的 URL&quot;&gt;&lt;/video&gt;</code></p><p>常见属性</p><p><img src="/2023/08/27/HTML/image-20230827205914128.png" alt="image-20230827205914128"></p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="综合案例一-个人简介"><a href="#综合案例一-个人简介" class="headerlink" title="综合案例一 - 个人简介"></a>综合案例一 - 个人简介</h2><p>网页制作思路：<strong>从上到下</strong>，<strong>先整体再局部</strong>，逐步分析制作<br>分析内容 → 写代码 → 保存 → 刷新浏览器，看效果</p><p><img src="/2023/08/27/HTML/image-20230827210023286.png" alt="image-20230827210023286"></p><h2 id="综合案例二-Vue-简介"><a href="#综合案例二-Vue-简介" class="headerlink" title="综合案例二 - Vue 简介"></a>综合案例二 - Vue 简介</h2><p><img src="/2023/08/27/HTML/image-20230827210219129.png" alt="image-20230827210219129"></p><h1 id="一、HTML-进阶"><a href="#一、HTML-进阶" class="headerlink" title="一、HTML 进阶"></a>一、HTML 进阶</h1><ul><li>列表</li><li>表格</li><li>表单</li></ul><h1 id="二、列表"><a href="#二、列表" class="headerlink" title="二、列表"></a>二、列表</h1><p>作用：布局内容排列整齐的区域。</p><p>列表分类：无序列表、有序列表、定义列表。</p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>作用：布局排列整齐的<strong>不需要规定顺序</strong>的区域。</p><p>标签：ul <strong>嵌套</strong> li，<strong>ul</strong> 是无序列表，<strong>li</strong> 是列表条目。</p><p><img src="/2023/08/27/HTML/image-20230827212014964.png" alt="image-20230827212014964"></p><p><code>&lt;ul&gt;         &lt;li&gt;第一项&lt;/li&gt;         &lt;li&gt;第二项&lt;/li&gt;         &lt;li&gt;第三项&lt;/li&gt;         ……     &lt;/ul&gt;</code></p><p>注意事项：</p><ul><li><strong>ul 标签里面只能包裹 li 标签</strong></li><li>li 标签里面可以包裹任何内容</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>作用：布局排列整齐的<strong>需要规定顺序</strong>的区域。</p><p>标签：ol <strong>嵌套</strong> li，<strong>ol</strong> 是有序列表，<strong>li</strong> 是列表条目。</p><p><img src="/2023/08/27/HTML/image-20230827212035082.png" alt="image-20230827212035082"></p><p><code>&lt;ol&gt;         &lt;li&gt;第一项&lt;/li&gt;         &lt;li&gt;第二项&lt;/li&gt;         &lt;li&gt;第三项&lt;/li&gt;         ……     &lt;/ol&gt;</code></p><p>注意事项：</p><ul><li><strong>ol 标签里面只能包裹 li 标签</strong></li><li>li 标签里面可以包裹任何内容</li></ul><h2 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h2><p>标签：dl <strong>嵌套</strong> dt 和 dd，<strong>dl</strong> 是<strong>定义列表</strong>，<strong>dt</strong> 是定义列表的<strong>标题</strong>，<strong>dd</strong> 是定义列表的<strong>描述 &#x2F; 详情</strong>。</p><p><img src="/2023/08/27/HTML/image-20230827212335708.png" alt="image-20230827212335708"></p><p><code>&lt;dl&gt;         &lt;dt&gt;列表标题&lt;/dt&gt;         &lt;dd&gt;列表描述 / 详情&lt;/dd&gt;         ……     &lt;/dl&gt;</code></p><p>注意事项：</p><ul><li><strong>dl 里面只能包含dt 和 dd</strong></li><li>dt 和 dd 里面可以包含任何内容</li></ul><h2 id="总结-11"><a href="#总结-11" class="headerlink" title="总结"></a>总结</h2><ol><li>无序列表标签结构是什么？分别表示什么含义？<br> ul：无序列表<br> li： 列表条目</li><li>有序列表标签结构是什么？分别表示什么含义？<br> ol：有序列表<br> li： 列表条目</li><li>定义列表标签结构是什么？分别表示什么含义？<br> dl：定义列表<br> dt：标题<br> dd：描述 &#x2F; 详情</li></ol><h1 id="三、表格"><a href="#三、表格" class="headerlink" title="三、表格"></a>三、表格</h1><h2 id="表格-–-基本用法"><a href="#表格-–-基本用法" class="headerlink" title="表格 – 基本用法"></a>表格 – 基本用法</h2><p>网页中的表格与 Excel 表格类似，用来<strong>展示数据</strong>。</p><p><img src="/2023/08/27/HTML/image-20230827212624023.png" alt="image-20230827212624023"></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>标签：<strong>table</strong> 嵌套 <strong>tr</strong>，tr 嵌套 <strong>td</strong> &#x2F; <strong>th</strong>。</p><p><img src="/2023/08/27/HTML/image-20230827212705631.png" alt="image-20230827212705631"></p><p><img src="/2023/08/27/HTML/image-20230827212730859.png" alt="image-20230827212730859"></p><p>提示：在网页中，<strong>表格默认没有边框线</strong>，使用 <strong>border</strong> 属性可以为表格添加边框线。</p><h2 id="表格结构标签-–-了解"><a href="#表格结构标签-–-了解" class="headerlink" title="表格结构标签 – 了解"></a>表格结构标签 – 了解</h2><p>作用：用表格结构标签把内容划分区域，让表格结构更清晰，语义更清晰。</p><p><img src="/2023/08/27/HTML/image-20230827212849312.png" alt="image-20230827212849312"></p><p>提示：表格结构标签可以省略</p><h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><p>作用：将<strong>多个</strong>单元格合并成<strong>一个</strong>单元格，以<strong>合并同类信息</strong>。</p><p><img src="/2023/08/27/HTML/image-20230827213020930.png" alt="image-20230827213020930"></p><p>合并单元格的步骤：</p><ol><li>明确合并的目标</li><li>保留最左最上的单元格，添加属性（取值是<strong>数字</strong>，表示<strong>需要合并的单元格数量</strong>）<ol><li>跨行合并，保留<strong>最上</strong>单元格，添加属性 <strong>rowspan</strong></li><li>跨列合并，保留<strong>最左</strong>单元格，添加属性 <strong>colspan</strong></li></ol></li><li>删除其他单元格</li></ol><p><strong>注意：不能跨表格结构标签合并单元格（thead、tbody、tfoot）</strong></p><h2 id="总结-12"><a href="#总结-12" class="headerlink" title="总结"></a>总结</h2><ol><li>以下表格结构标签分别是什么含义？<br>thead          表格头部<br>tbody          表格主体<br>tfoot            表格底部</li></ol><h1 id="四、表单"><a href="#四、表单" class="headerlink" title="四、表单"></a>四、表单</h1><p>作用：收集用户信息。</p><p>使用场景：</p><ul><li>登录页面</li><li>注册页面</li><li>搜索区域</li></ul><p><img src="/2023/08/27/HTML/image-20230827213250907.png" alt="image-20230827213250907"></p><h2 id="input-标签基本使用"><a href="#input-标签基本使用" class="headerlink" title="input 标签基本使用"></a>input 标签基本使用</h2><p>input 标签 <strong>type 属性值不同，则功能不同</strong>。</p><p><code>&lt;input type=&quot;...&quot; &gt;</code></p><p><img src="/2023/08/27/HTML/image-20230827213635966.png" alt="image-20230827213635966"></p><h2 id="input-标签占位文本"><a href="#input-标签占位文本" class="headerlink" title="input 标签占位文本"></a>input 标签占位文本</h2><p>占位文本：提示信息。文本框和密码框都可以使用。</p><p><img src="/2023/08/27/HTML/image-20230827215937332.png" alt="image-20230827215937332"></p><p><code>&lt;input type=&quot;...&quot; placeholder=&quot;提示信息&quot;&gt;</code></p><h2 id="单选框-radio"><a href="#单选框-radio" class="headerlink" title="单选框 radio"></a>单选框 radio</h2><p>常用属性：</p><p><img src="/2023/08/27/HTML/image-20230827220050368.png" alt="image-20230827220050368"></p><p><code>&lt;input type=&quot;radio&quot; name=&quot;gender&quot; checked&gt; 男     &lt;input type=&quot;radio&quot; name=&quot;gender&quot;&gt; 女</code></p><p>提示：name 属性值自定义。</p><h2 id="上传文件-file"><a href="#上传文件-file" class="headerlink" title="上传文件 - file"></a>上传文件 - file</h2><p>默认情况下，文件上传表单控件只能上传一个文件，添加 <strong>multiple</strong> 属性可以实现<strong>文件多选</strong>功能。</p><p><code>&lt;input type=&quot;file&quot; multiple&gt;</code></p><h2 id="多选框-checkbox"><a href="#多选框-checkbox" class="headerlink" title="多选框 - checkbox"></a>多选框 - checkbox</h2><p>多选框也叫复选框。</p><p>默认选中：checked。</p><p><code>&lt;input type=&quot;checkbox&quot; checked&gt; 敲前端代码</code></p><p><img src="/2023/08/27/HTML/image-20230828031445666.png" alt="image-20230828031445666"></p><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><p>标签：<strong>select 嵌套 option</strong>，<strong>select</strong> 是下拉菜单整体，<strong>option</strong>是下拉菜单的每一项。</p><p><strong>默认显示第一项</strong>，<strong>selected</strong> 属性实现默认选中功能</p><p><code>&lt;select&gt;     &lt;option&gt;北京&lt;/option&gt;     &lt;option&gt;上海&lt;/option&gt;     &lt;option&gt;广州&lt;/option&gt;     &lt;option&gt;深圳&lt;/option&gt;     &lt;option selected&gt;武汉&lt;/option&gt;     &lt;/select&gt;</code></p><p><img src="/2023/08/27/HTML/image-20230828031427464.png" alt="image-20230828031427464"></p><h2 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h2><p>作用：<strong>多行</strong>输入文本的表单控件。</p><p>标签：<strong>textarea</strong>，双标签。</p><p><code>&lt;textarea&gt;默认提示文字&lt;/textarea&gt;</code></p><p><img src="/2023/08/27/HTML/image-20230828031407679.png" alt="image-20230828031407679"></p><p>注意点：</p><ul><li>实际开发中，使用 CSS 设置 文本域的尺寸</li><li>实际开发中，一般禁用右下角的拖拽功能</li></ul><h2 id="label-标签–-增大点击范围"><a href="#label-标签–-增大点击范围" class="headerlink" title="label 标签– 增大点击范围"></a>label 标签– 增大点击范围</h2><p>作用：网页中，某个标签的说明文本。</p><p><img src="/2023/08/27/HTML/image-20230828031611191.png" alt="image-20230828031611191"></p><p>经验：用 label 标签绑定文字和表单控件的关系，<strong>增大表单控件的点击范围</strong>。</p><p><img src="/2023/08/27/HTML/image-20230828031629236.png" alt="image-20230828031629236"></p><ul><li><p>写法一</p><ul><li><p><strong>label</strong> 标签<strong>只</strong>包裹<strong>内容</strong>，<strong>不包裹表单控件</strong></p></li><li><p>设置 label 标签的 <strong>for</strong> 属性值 和表单控件的 <strong>id</strong> 属性值<strong>相同</strong></p></li></ul></li></ul><p><code>&lt;input type=&quot;radio&quot; id=&quot;man&quot;&gt;     &lt;label for=&quot;man&quot;&gt;男&lt;/label&gt;</code></p><ul><li>写法二<ul><li>使用 label 标签包裹文字和表单控件，不需要属性</li></ul></li></ul><p><code>&lt;label&gt;&lt;input type=&quot;radio&quot;&gt; 女&lt;/label&gt;</code></p><p>提示：支持 label 标签增大点击范围的表单控件：<strong>文本框、密码框、上传文件、单选框、多选框、下拉菜单、文本域</strong>等等。</p><h2 id="按钮-button"><a href="#按钮-button" class="headerlink" title="按钮 - button"></a>按钮 - button</h2><p><code>&lt;button type=&quot;&quot;&gt;按钮&lt;/button&gt;</code></p><p>type属性值：</p><p><img src="/2023/08/27/HTML/image-20230828031957282.png" alt="image-20230828031957282"></p><p>注意：按钮需配合 <strong>form 标签</strong>（表单区域)才能实现对应的功能。</p><h2 id="总结-13"><a href="#总结-13" class="headerlink" title="总结"></a>总结</h2><ol><li>input 标签 加哪个属性可以实现不同的功能？<br>type<br><code>&lt;input type=&quot;...&quot; &gt;</code></li></ol><h1 id="五、语义化"><a href="#五、语义化" class="headerlink" title="五、语义化"></a>五、语义化</h1><h2 id="无语义的布局标签"><a href="#无语义的布局标签" class="headerlink" title="无语义的布局标签"></a>无语义的布局标签</h2><p>作用：<strong>布局网页</strong>（划分网页区域，摆放内容）</p><ul><li><strong>div</strong>：独占一行</li><li><strong>span</strong>：不换行</li></ul><p><code>&lt;div&gt;div 标签，独占一行&lt;/div&gt;     &lt;span&gt;span 标签，不换行&lt;/span&gt;</code></p><h2 id="有语义的布局标签"><a href="#有语义的布局标签" class="headerlink" title="有语义的布局标签"></a>有语义的布局标签</h2><p><img src="/2023/08/27/HTML/image-20230828032137827.png" alt="image-20230828032137827"></p><p><img src="/2023/08/27/HTML/image-20230828032211617.png" alt="image-20230828032211617"></p><h1 id="六、字符实体"><a href="#六、字符实体" class="headerlink" title="六、字符实体"></a>六、字符实体</h1><p>作用：在网页中<strong>显示预留字符</strong>。</p><p><img src="/2023/08/27/HTML/image-20230828032253345.png" alt="image-20230828032253345"></p><p>提示：</p><ul><li><strong>lt</strong> 是 less than 的缩写</li><li><strong>gt</strong> 是 greater than 的缩写</li></ul><h1 id="七、综合案例"><a href="#七、综合案例" class="headerlink" title="七、综合案例"></a>七、综合案例</h1><h2 id="综合案例一-–-体育新闻列表"><a href="#综合案例一-–-体育新闻列表" class="headerlink" title="综合案例一 – 体育新闻列表"></a>综合案例一 – 体育新闻列表</h2><p><img src="/2023/08/27/HTML/image-20230828032349907.png" alt="image-20230828032349907"></p><h2 id="综合案例二-–-注册信息"><a href="#综合案例二-–-注册信息" class="headerlink" title="综合案例二 – 注册信息"></a>综合案例二 – 注册信息</h2><p><img src="/2023/08/27/HTML/image-20230828032409628.png" alt="image-20230828032409628"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、HTML-初体验&quot;&gt;&lt;a href=&quot;#一、HTML-初体验&quot; class=&quot;headerlink&quot; title=&quot;一、HTML 初体验&quot;&gt;&lt;/a&gt;一、HTML 初体验&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;HTML 概念&lt;/li&gt;
&lt;li&gt;HTML 语法&lt;/li&gt;
&lt;/</summary>
      
    
    
    
    <category term="前端学习笔记" scheme="http://lemur9.top/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="http://lemur9.top/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>配置logback</title>
    <link href="http://lemur9.top/2023/08/24/%E9%85%8D%E7%BD%AElogback/"/>
    <id>http://lemur9.top/2023/08/24/%E9%85%8D%E7%BD%AElogback/</id>
    <published>2023-08-24T14:51:15.000Z</published>
    <updated>2023-08-24T15:16:01.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置logback（转载）"><a href="#配置logback（转载）" class="headerlink" title="配置logback（转载）"></a>配置logback（转载）</h1><h2 id="一、logack-简介"><a href="#一、logack-简介" class="headerlink" title="一、logack 简介"></a>一、logack 简介</h2><blockquote><p>logback 官网：<a href="https://logback.qos.ch/">https://logback.qos.ch/</a></p></blockquote><p><code>logback</code>和<code>log4j</code>是一个人写的</p><p><code>springboot</code>默认使用的日志框架是<code>logback</code>。</p><ul><li><p>三个模块组成</p><ul><li><p>logback-core</p></li><li><p>logback-classic</p></li><li><p>logback-access</p></li></ul></li></ul><p><code>logback-core</code> 是其它模块的基础设施，其它模块基于它构建，显然，<code>logback-core</code> 提供了一些关键的通用机制。</p><p><code>logback-classic</code> 的地位和作用等同于 <code>Log4J</code>，它也被认为是 <code>Log4J</code> 的一个改进版，并且它实现了简单日志门面 <code>SLF4J</code>；</p><p> <code>logback-access</code> 主要作为一个与 <code>Servlet</code> 容器交互的模块，比如说<code>tomcat</code>或者 <code>jetty</code>，提供一些与 <code>HTTP</code> 访问相关的功能。</p><h2 id="二、配置文件详解"><a href="#二、配置文件详解" class="headerlink" title="二、配置文件详解"></a>二、配置文件详解</h2><h3 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h3><p>先来看这张图，这个结构就是整个logback.xml配置文件的结构。</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164b84acd40e3590tplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>对应来看下配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;60 seconds&quot;</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;glmapper-name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;glmapper-demo&quot;</span> /&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">contextName</span>&gt;</span>$&#123;glmapper-name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">contextName</span>&gt;</span> <br>    <br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span>&gt;</span><br>        //xxxx<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>   <br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span>&gt;</span><br>        //xxxx<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span>             <br>       //xxxx<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>  <br></code></pre></td></tr></table></figure><blockquote><p>ps：想使用spring扩展profile支持，要以logback-spring.xml命名，其他如property需要改为springProperty</p></blockquote><ul><li>scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</li><li>scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</li><li>debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</li></ul><h3 id="contextName"><a href="#contextName" class="headerlink" title="contextName"></a>contextName</h3><p>每个<code>logger</code>都关联到<code>logger</code>上下文，默认上下文名称为<code>“default”</code>。但可以使用<code>contextName</code>标签设置成其他名字，用于区分不同应用程序的记录</p><h3 id="property"><a href="#property" class="headerlink" title="property"></a>property</h3><p>用来定义变量值的标签，<code>property</code>标签有两个属性，<code>name</code>和<code>value</code>；其中<code>name</code>的值是变量的名称，<code>value</code>的值时变量定义的值。通过<code>property</code>定义的值会被插入到<code>logger</code>上下文中。定义变量后，可以使“${name}”来使用变量。如上面的<code>xml</code>所示。</p><h3 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h3><p>用来设置某一个包或者具体的某一个类的日志打印级别以及指定<code>appender</code>。</p><h3 id="root"><a href="#root" class="headerlink" title="root"></a>root</h3><p>根logger，也是一种logger，且只有一个level属性</p><h3 id="appender"><a href="#appender" class="headerlink" title="appender"></a>appender</h3><p>负责写日志的组件，下面会细说</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter其实是appender里面的子元素。它作为过滤器存在，执行一个过滤器会有返回DENY，NEUTRAL，ACCEPT三个枚举值中的一个。</p><ul><li>DENY：日志将立即被抛弃不再经过其他过滤器</li><li>NEUTRAL：有序列表里的下个过滤器过接着处理日志</li><li>ACCEPT：日志会被立即处理，不再经过剩余过滤器</li></ul><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>首先来配置一个非常简单的文件。这里申请下，我使用的是 <code>logback-spring.xml</code>。和 <code>logback.xml</code> 在<code>properties</code>上有略微差别。其他都一样。</p><blockquote><p>工程：springboot+web</p></blockquote><p>先来看下项目目录</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164b8ba7a44783aatplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>properties中就是指定了日志的打印级别和日志的输出位置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#设置应用的日志级别</span><br><span class="hljs-attr">logging.level.com.glmapper.spring.boot</span>=<span class="hljs-string">INFO</span><br><span class="hljs-comment">#路径</span><br><span class="hljs-attr">logging.path</span>=<span class="hljs-string">./logs</span><br></code></pre></td></tr></table></figure><h4 id="通过控制台输出的log"><a href="#通过控制台输出的log" class="headerlink" title="通过控制台输出的log"></a>通过控制台输出的log</h4><h5 id="logback-spring-xml的配置如下："><a href="#logback-spring-xml的配置如下：" class="headerlink" title="logback-spring.xml的配置如下："></a>logback-spring.xml的配置如下：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 默认的控制台日志输出，一般生产环境都是后台启动，这个没太大作用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %-5level %logger&#123;80&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="打印日志的controller"><a href="#打印日志的controller" class="headerlink" title="打印日志的controller"></a>打印日志的controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span><br>LoggerFactory.getLogger(HelloController.class);<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> TestLogService testLogService;<br><br><span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    LOGGER.info(<span class="hljs-string">&quot;GLMAPPER-SERVICE:info&quot;</span>);<br>    LOGGER.error(<span class="hljs-string">&quot;GLMAPPER-SERVICE:error&quot;</span>);<br>    testLogService.printLogToSpecialPackage();<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello spring boot&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="验证结果："><a href="#验证结果：" class="headerlink" title="验证结果："></a>验证结果：</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">01:50:39.633 INFO  com.glmapper.spring.boot.controller.HelloController<br>- GLMAPPER-SERVICE:info<br>01:50:39.633 ERROR com.glmapper.spring.boot.controller.HelloController<br>- GLMAPPER-SERVICE:error<br></code></pre></td></tr></table></figure><p>上面的就是通过控制台打印出来的，这个时候因为我们没有指定日志文件的输出，因为不会在工程目录下生产<code>logs</code>文件夹。</p><h4 id="控制台不打印，直接输出到日志文件"><a href="#控制台不打印，直接输出到日志文件" class="headerlink" title="控制台不打印，直接输出到日志文件"></a>控制台不打印，直接输出到日志文件</h4><h5 id="logback-spring-xml的配置如下：-1"><a href="#logback-spring-xml的配置如下：-1" class="headerlink" title="logback-spring.xml的配置如下："></a>logback-spring.xml的配置如下：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 属性文件:在properties文件中找到对应的配置项 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProperty</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;context&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logging.path&quot;</span>  <span class="hljs-attr">source</span>=<span class="hljs-string">&quot;logging.path&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProperty</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;context&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logging.level&quot;</span> <span class="hljs-attr">source</span>=<span class="hljs-string">&quot;logging.level.com.glmapper.spring.boot&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 默认的控制台日志输出，一般生产环境都是后台启动，这个没太大作用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %-5level %logger&#123;80&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;GLMAPPER-LOGGERONE&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>            $&#123;logging.path&#125;/glmapper-spring-boot/glmapper-loggerone.log<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-loggerone.log.%d&#123;yyyy-MM-dd&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GLMAPPER-LOGGERONE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里我们<code>appender-ref</code>指定的<code>appender</code>是<code>GLMAPPER-LOGGERONE</code>，因为之前没有名字为<code>GLMAPPER-LOGGERONE</code>的<code>appender</code>，所以要增加一个<code>name</code>为<code>GLMAPPER-LOGGERONE</code>的<code>appender</code>。</p><p>注意上面这个配置，我们是直接接将<code>root</code>的<code>appender-ref</code>直接指定到我们的<code>GLMAPPER-LOGGERONE</code>这个appender的。所以控制台中将只会打印出bannar之后就啥也不打印了，所有的启动信息都会被打印在日志文件<code>glmapper-loggerone.log</code>中。</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164b8d8b5f22d274tplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>但是实际上我们不希望我的业务日志中会包括这些启动信息。所以这个时候我们就需要通过<code>logger</code>标签来搞事情了。将上面的配置文件进行简单修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.glmapper.spring.boot.controller&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.level&#125;&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GLMAPPER-LOGGERONE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.level&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>让<code>root</code>指向控制台输出；<code>logger</code>负责打印包<code>com.glmapper.spring.boot.controller</code>下的日志。</p><h5 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h5><p>还是通过我们的测试controller来打印日志为例，但是这里不会在控制台出现日志信息了。期望的日志文件在<code>./logs/glmapper-spring-boot/glmapper-loggerone.log</code>。</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164b8df30b286089tplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><h4 id="logger和appender的关系"><a href="#logger和appender的关系" class="headerlink" title="logger和appender的关系"></a>logger和appender的关系</h4><p>上面两种是一个基本的配置方式，通过上面两个案例，我们先来了解下<code>logger/appender/root</code>之间的关系，然后再详细的说下<code>logger</code>和<code>appender</code>的配置细节。</p><p>在最前面介绍中提到，<code>root</code>是根<code>logger</code>,所以他两是一回事；只不过<code>root</code>中不能有<code>name</code>和<code>additivity</code>属性，是有一个<code>level</code>。</p><p><code>appender</code>是一个日志打印的组件，这里组件里面定义了打印过滤的条件、打印输出方式、滚动策略、编码方式、打印格式等等。但是它仅仅是一个打印组件，如果我们不使用一个<code>logger</code>或者<code>root</code>的<code>appender-ref</code>指定某个具体的<code>appender</code>时，它就没有什么意义。</p><p>因此<code>appender</code>让我们的应用知道怎么打、打印到哪里、打印成什么样；而<code>logger</code>则是告诉应用哪些可以这么打。例如某个类下的日志可以使用这个<code>appender</code>打印或者某个包下的日志可以这么打印。</p><h4 id="appender-配置详解"><a href="#appender-配置详解" class="headerlink" title="appender 配置详解"></a>appender 配置详解</h4><p>这里以上面案例中的名为<code>GLMAPPER-LOGGERONE</code>的<code>appender</code>说明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;GLMAPPER-LOGGERONE&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>        $&#123;logging.path&#125;/glmapper-spring-boot/glmapper-loggerone.log<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-loggerone.log.%d&#123;yyyy-MM-dd&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>appender</code> 有两个属性 <code>name</code>和<code>class</code>;<code>name</code>指定<code>appender</code>名称，<code>class</code>指定<code>appender</code>的全限定名。上面声明的是名为<code>GLMAPPER-LOGGERONE</code>，<code>class</code>为<code>ch.qos.logback.core.rolling.RollingFileAppender</code>的一个<code>appender</code>。</p><h3 id="appender-的种类"><a href="#appender-的种类" class="headerlink" title="appender 的种类"></a>appender 的种类</h3><ul><li>ConsoleAppender：把日志添加到控制台</li><li>FileAppender：把日志添加到文件</li><li>RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。它是FileAppender的子类</li></ul><h3 id="append-子标签"><a href="#append-子标签" class="headerlink" title="append 子标签"></a>append 子标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果是 <code>true</code>，日志被追加到文件结尾，如果是<code>false</code>，清空现存文件，默认是<code>true</code>。</p><h3 id="filter-子标签"><a href="#filter-子标签" class="headerlink" title="filter 子标签"></a>filter 子标签</h3><p>在简介中提到了<code>filter</code>；作用就是上面说的。可以为<code>appender</code> 添加一个或多个过滤器，可以用任意条件对日志进行过滤。<code>appender</code> 有多个过滤器时，按照配置顺序执行。</p><h4 id="ThresholdFilter"><a href="#ThresholdFilter" class="headerlink" title="ThresholdFilter"></a>ThresholdFilter</h4><p>临界值过滤器，过滤掉低于指定临界值的日志。当日志级别等于或高于临界值时，过滤器返回<code>NEUTRAL</code>；当日志级别低于临界值时，日志会被拒绝。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">filter</span> <span class="hljs-keyword">class</span>=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;<br>    &lt;<span class="hljs-keyword">level</span>&gt;<span class="hljs-keyword">INFO</span>&lt;/<span class="hljs-keyword">level</span>&gt;<br>&lt;/<span class="hljs-keyword">filter</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="LevelFilter"><a href="#LevelFilter" class="headerlink" title="LevelFilter"></a>LevelFilter</h4><p>级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据<code>onMath</code>(用于配置符合过滤条件的操作) 和 <code>onMismatch</code>(用于配置不符合过滤条件的操作)接收或拒绝日志。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span>   <br>  <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span>   <br>  <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span>   <br>  <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>关于<code>NEUTRAL</code>、<code>ACCEPT</code>、<code>DENY</code> 见上文简介中关于<code>filter</code>的介绍。</p><h3 id="file-子标签"><a href="#file-子标签" class="headerlink" title="file 子标签"></a>file 子标签</h3><p><code>file</code> 标签用于指定被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>    $&#123;logging.path&#125;/glmapper-spring-boot/glmapper-loggerone.log<br><span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个表示当前appender将会将日志写入到<code>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-loggerone.log</code>这个目录下。</p><h3 id="rollingPolicy-子标签"><a href="#rollingPolicy-子标签" class="headerlink" title="rollingPolicy 子标签"></a>rollingPolicy 子标签</h3><p>这个子标签用来描述滚动策略的。这个只有<code>appender</code>的<code>class</code>是<code>RollingFileAppender</code>时才需要配置。这个也会涉及文件的移动和重命名（a.log-&gt;a.log.2018.07.22）。</p><h4 id="TimeBasedRollingPolicy"><a href="#TimeBasedRollingPolicy" class="headerlink" title="TimeBasedRollingPolicy"></a>TimeBasedRollingPolicy</h4><p>最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。这个下面又包括了两个属性：</p><ul><li>FileNamePattern</li><li>maxHistory</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--日志文件输出的文件名:按天回滚 daily --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span><br>        $&#123;logging.path&#125;/glmapper-spring-boot/glmapper-loggerone.log.%d&#123;yyyy-MM-dd&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的这段配置表明<strong>每天生成一个日志文件，保存30天的日志文件</strong></p><h4 id="FixedWindowRollingPolicy"><a href="#FixedWindowRollingPolicy" class="headerlink" title="FixedWindowRollingPolicy"></a>FixedWindowRollingPolicy</h4><p>根据固定窗口算法重命名文件的滚动策略。</p><h3 id="encoder-子标签"><a href="#encoder-子标签" class="headerlink" title="encoder 子标签"></a>encoder 子标签</h3><p>对记录事件进行格式化。它干了两件事：</p><ul><li>把日志信息转换成字节数组</li><li>把字节数组写入到输出流</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125;<br>    - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br></code></pre></td></tr></table></figure><p>目前<code>encoder</code>只有<code>PatternLayoutEncoder</code>一种类型。</p><h3 id="定义一个只打印error级别日志的appcener"><a href="#定义一个只打印error级别日志的appcener" class="headerlink" title="定义一个只打印error级别日志的appcener"></a>定义一个只打印error级别日志的appcener</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 错误日志 appender ： 按照每天生成日志文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ERROR-APPENDER&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 过滤器，只记录 error 级别的日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 每天生成一个日志文件，保存30天的日志文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出的文件名:按天回滚 daily --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-error.log.%d&#123;yyyy-MM-dd&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="定义一个输出到控制台的appender"><a href="#定义一个输出到控制台的appender" class="headerlink" title="定义一个输出到控制台的appender"></a>定义一个输出到控制台的appender</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 默认的控制台日志输出，一般生产环境都是后台启动，这个没太大作用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %-5level %logger&#123;80&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三、logger-配置详解"><a href="#三、logger-配置详解" class="headerlink" title="三、logger 配置详解"></a>三、logger 配置详解</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.glmapper.spring.boot.controller&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.level&#125;&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GLMAPPER-LOGGERONE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的这个配置文件描述的是：<code>com.glmapper.spring.boot.controller</code>这个包下的<code>$&#123;logging.level&#125;</code>级别的日志将会使用<code>GLMAPPER-LOGGERONE</code>来打印。<code>logger</code>有三个属性和一个子标签：</p><ul><li>name:用来指定受此<code>logger</code>约束的某一个包或者具体的某一个类。</li><li>level:用来设置打印级别（<code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, <code>ALL</code> 和 <code>OFF</code>），还有一个值<code>INHERITED</code>或者同义词<code>NULL</code>，代表强制执行上级的级别。如果没有设置此属性，那么当前<code>logger</code>将会继承上级的级别。</li><li>addtivity:用来描述是否向上级<code>logger</code>传递打印信息。默认是<code>true</code>。</li></ul><p><code>appender-ref</code>则是用来指定具体<code>appender</code>的。</p><h2 id="四、不同日志隔离打印案例"><a href="#四、不同日志隔离打印案例" class="headerlink" title="四、不同日志隔离打印案例"></a>四、不同日志隔离打印案例</h2><p>在前面的例子中我们有三种appender,一个是指定包约束的，一个是控制error级别的，一个是控制台的。然后这小节我们就来实现下不同日志打印到不同的log文件中。</p><h3 id="根据包进行日志文件隔离"><a href="#根据包进行日志文件隔离" class="headerlink" title="根据包进行日志文件隔离"></a>根据包进行日志文件隔离</h3><p>这个例子里我们将<code>com.glmapper.spring.boot.controller</code>中的日志输出到<code>glmapper-controller.log</code>；将<code>com.glmapper.spring.boot.service</code>中的日志输出到<code>glmapper-service.log</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--打印日志到glmapper-service.log的appender--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;GLMAPPER-SERVICE&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>        $&#123;logging.path&#125;/glmapper-spring-boot/glmapper-service.log<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-service.log.%d&#123;yyyy-MM-dd&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--打印日志到glmapper-controller.log的appender--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;GLMAPPER-CONTROLLER&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>        $&#123;logging.path&#125;/glmapper-spring-boot/glmapper-controller.log<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-controller.log.%d&#123;yyyy-MM-dd&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--此logger约束将.controller包下的日志输出到GLMAPPER-CONTROLLER，错误日志输出到GERROR-APPENDE；GERROR-APPENDE见上面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.glmapper.spring.boot.controller&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.level&#125;&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GLMAPPER-CONTROLLER&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GERROR-APPENDER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--此logger约束将.service包下的日志输出到GLMAPPER-SERVICE，错误日志输出到GERROR-APPENDE；GERROR-APPENDE见上面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.glmapper.spring.boot.service&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.level&#125;&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GLMAPPER-SERVICE&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GERROR-APPENDER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br></code></pre></td></tr></table></figure><p>来看运行结果</p><p>1、glmaper-controller</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164bac0d699c0ca9tplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>2、glmapper-service</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164bac127270addftplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>3、glmapper-error</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164bac1698f84f29tplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>满足我们的预期，但是这里有个小问题。在<code>info</code>日志里出现了<code>error</code>,当然这是正常的。假如我们不想在<code>info</code>里面出现<code>error</code>怎么办呢？很简单，我们以<code>APPENDER-SERVICE</code>为例，将<code>filter</code>过滤器进行修改：</p><p>将下面的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果命中就禁止这条日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span>  <br>    <span class="hljs-comment">&lt;!-- 如果没有命中就使用这条规则 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里同时要注意的是，在<code>logger</code>中<code>level</code>需要设置为<code>info</code>级别。</p><h3 id="根据类进行日志文件隔离"><a href="#根据类进行日志文件隔离" class="headerlink" title="根据类进行日志文件隔离"></a>根据类进行日志文件隔离</h3><p>这个其实也是和上面那个差不过，只不过粒度更细一点，一般情况下比如说我们有个定时任务类需要单独来记录其日志信息，这样我们就可以考虑使用基于类维度来约束打印。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--特殊功能单独appender 例如调度类的日志--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SCHEDULERTASKLOCK-APPENDER&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/scheduler-task-lock.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 每天生成一个日志文件，保存30天的日志文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出的文件名:按天回滚 daily --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/scheduler-task-lock.log.%d&#123;yyyy-MM-dd&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--这里指定到了具体的某一个类--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.glmapper.spring.boot.task.TestLogTask&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.level&#125;&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;SCHEDULERTASKLOCK-APPENDER&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR-APPENDER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最终<code>TestLogTask</code>中的日志将会被打印到这个自己独立的log文件中。如下所示：</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164bad7d9e4dd631tplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><h3 id="根据自定义-logger-的-name-进行日志文件隔离"><a href="#根据自定义-logger-的-name-进行日志文件隔离" class="headerlink" title="根据自定义 logger 的 name 进行日志文件隔离"></a>根据自定义 logger 的 name 进行日志文件隔离</h3><p><code>logger</code>的<code>name</code>除了类、包等约束之外，当然还可以这样来玩。。。</p><p>在进行案例之前，这里先把前面案例中<code>logger</code>声明的代码贴一下，以作对比,以<code>TestLogTask</code>类中的日志为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span><br> LoggerFactory.getLogger(TestLogTask.class);<br></code></pre></td></tr></table></figure><p>在<code>getLogger</code>中我们是将当前对象的<code>class</code>作为参数的，这个是为了打印时获取其全限定名的（见下面3-）。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">1-2018-07-21 11:15:42.003 [pool-1-thread-1] <br>2-INFO  <br>3-com.glmapper.spring.boot.task.TestLogTask -<br>4-com.glmapper.spring.boot.task:info<br></code></pre></td></tr></table></figure><h4 id="业务类定义"><a href="#业务类定义" class="headerlink" title="业务类定义"></a>业务类定义</h4><p>我们同样是<code>service</code>包下定义一个类<code>TestLogNameServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.glmapper.spring.boot.service;<br><br><span class="hljs-meta">@Service(&quot;testLogNameService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLogNameServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TestLogNameService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span><br>    LoggerFactory.getLogger(<span class="hljs-string">&quot;GLMAPPER-TEST-LOG&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        LOGGER.info(<span class="hljs-string">&quot;GLMAPPER-TEST-LOG:this is special logger-----info&quot;</span>);<br>        LOGGER.error(<span class="hljs-string">&quot;GLMAPPER-TEST-LOG:this is special logger-------error&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="appender和logger配置"><a href="#appender和logger配置" class="headerlink" title="appender和logger配置"></a>appender和logger配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ROOT-APPENDER&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-test.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 每天生成一个日志文件，保存30天的日志文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出的文件名:按天回滚 daily --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-test.log.%d&#123;yyyy-MM-dd&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--这里的name和业务类中的getLogger中的字符串是一样的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;GLMAPPER-TEST-LOG&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.level&#125;&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ROOT-APPENDER&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR-APPENDER&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们这个预期的是<code>TestLogNameServiceImpl</code>中的日志不打印到<code>glmapper-service.log</code>中，而是打印到<code>glmapper-test.log</code>中。</p><p>1、glmapper-test.log</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164bae82de2d1d6ctplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>2、glmapper-service.log</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164bae86cb0f9c04tplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>满足我们的预期。</p><h2 id="五、如何使用logback打印mybatis的sql语句"><a href="#五、如何使用logback打印mybatis的sql语句" class="headerlink" title="五、如何使用logback打印mybatis的sql语句"></a>五、如何使用logback打印mybatis的sql语句</h2><p>这个还是比较坑的。为什么。看下这个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;slf4j&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>mybatis-configration.xml</code>中，我们通过这样一个配置项来关联到具体的日志组件。但是<code>logImpl</code>的实现中是没有<code>logback</code>的。那么怎么办呢？这里只能通过<code>slf4j</code>的方式桥接到<code>logback</code>。</p><p>然后在我们的logback-spring.xml中进行如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将sql语句输出到具体的日志文件中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.alipay.sofa.cloudplatform.common.dao&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.sql.level&#125;&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;SQL-APPENDER&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里有几个点需要注意的。首先是<code>$&#123;logging.sql.level&#125;</code>这个必须是debug，这个是由mybatis本身实现决定的。而这里的<code>name</code>设定的<code>com.alipay.sofa.cloudplatform.common.dao</code>值就是我们dao接口的包路径。</p><p>网上看了一个比较典型的案例，这种方式只能输出到控制台，并不能将文件输出到日志文件；它是根据内部的一个实现机制偷了个懒。<a href="https://link.juejin.cn/?target=https://blog.csdn.net/xiaoyu411502/article/details/51064885">mybatis用logback日志不显示sql的解决办法</a>。</p><blockquote><p>作者：磊叔的技术博客<br>链接：<a href="https://juejin.cn/post/6844903641535479821">https://juejin.cn/post/6844903641535479821</a><br>来源：稀土掘金</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;配置logback（转载）&quot;&gt;&lt;a href=&quot;#配置logback（转载）&quot; class=&quot;headerlink&quot; title=&quot;配置logback（转载）&quot;&gt;&lt;/a&gt;配置logback（转载）&lt;/h1&gt;&lt;h2 id=&quot;一、logack-简介&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="java学习笔记" scheme="http://lemur9.top/categories/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="logback" scheme="http://lemur9.top/tags/logback/"/>
    
  </entry>
  
  <entry>
    <title>并发编程</title>
    <link href="http://lemur9.top/2023/08/19/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>http://lemur9.top/2023/08/19/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</id>
    <published>2023-08-19T11:24:47.000Z</published>
    <updated>2023-08-21T14:50:10.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><h2 id="一、进程和线程"><a href="#一、进程和线程" class="headerlink" title="一、进程和线程"></a>一、进程和线程</h2><h3 id="1、进程"><a href="#1、进程" class="headerlink" title="1、进程"></a>1、进程</h3><ul><li>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的</li><li>当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。</li><li>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器等），也有的程序只能启动一个实例进程（例如网易云音乐、360 安全卫士等）</li></ul><h3 id="2、线程"><a href="#2、线程" class="headerlink" title="2、线程"></a>2、线程</h3><ul><li>一个进程之内可以分为一到多个线程。</li><li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行</li><li>Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。 在 windows 中进程是不活动的，只是作为线程的容器</li></ul><h3 id="3、二者对比"><a href="#3、二者对比" class="headerlink" title="3、二者对比"></a>3、二者对比</h3><ul><li>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集</li><li>进程拥有共享的资源，如内存空间等，供其内部的线程共享</li><li>进程间通信较为复杂<ul><li>同一台计算机的进程通信称为 IPC（Inter-process communication）</li><li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP</li></ul></li><li>线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量</li><li>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</li></ul><h2 id="二、并行与并发"><a href="#二、并行与并发" class="headerlink" title="二、并行与并发"></a>二、并行与并发</h2><p>引用 Rob Pike 的一段描述：</p><ul><li>并发（concurrent）是同一时间应对（dealing with）多件事情的能力</li><li>并行（parallel）是同一时间动手做（doing）多件事情的能力</li></ul><p>例子</p><ul><li>家庭主妇做饭、打扫卫生、给孩子喂奶，她一个人轮流交替做这多件事，这时就是并发</li><li>家庭主妇雇了个保姆，她们一起这些事，这时既有并发，也有并行（这时会产生竞争，例如锅只有一口，一个人用锅时，另一个人就得等待）</li><li>雇了3个保姆，一个专做饭、一个专打扫卫生、一个专喂奶，互不干扰，这时是并行</li></ul><h2 id="三、Java-线程"><a href="#三、Java-线程" class="headerlink" title="三、Java 线程"></a>三、Java 线程</h2><h3 id="1、创建和运行线程的几种方式"><a href="#1、创建和运行线程的几种方式" class="headerlink" title="1、创建和运行线程的几种方式"></a>1、创建和运行线程的几种方式</h3><h4 id="1-直接使用-Thread"><a href="#1-直接使用-Thread" class="headerlink" title="1) 直接使用 Thread"></a>1) 直接使用 Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建线程对象</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 要执行的任务</span><br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 启动线程</span><br>t.start();<br></code></pre></td></tr></table></figure><h4 id="2-使用-Runnable-配合-Thread"><a href="#2-使用-Runnable-配合-Thread" class="headerlink" title="2) 使用 Runnable 配合 Thread"></a>2) 使用 Runnable 配合 Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 要执行的任务</span><br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 创建线程对象</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>( runnable );<br><span class="hljs-comment">// 启动线程</span><br>t.start();<br></code></pre></td></tr></table></figure><h4 id="3-FutureTask-配合-Thread"><a href="#3-FutureTask-配合-Thread" class="headerlink" title="3) FutureTask 配合 Thread"></a>3) FutureTask 配合 Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建任务对象</span><br>FutureTask&lt;Integer&gt; task3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(() -&gt; &#123;<br>    log.debug(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>&#125;);<br><br><span class="hljs-comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task3, <span class="hljs-string">&quot;t3&quot;</span>).start();<br><br><span class="hljs-comment">// 主线程阻塞，同步等待 task 执行完毕的结果</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> task3.get();<br>log.debug(<span class="hljs-string">&quot;结果是:&#123;&#125;&quot;</span>, result);<br></code></pre></td></tr></table></figure><h3 id="2、查看进程线程的方法"><a href="#2、查看进程线程的方法" class="headerlink" title="2、查看进程线程的方法"></a>2、查看进程线程的方法</h3><h4 id="1-windows"><a href="#1-windows" class="headerlink" title="1) windows"></a>1) <strong>windows</strong></h4><ul><li>任务管理器可以查看进程和线程数，也可以用来杀死进程</li><li><code>tasklist</code> 查看进程</li><li><code>taskkill</code> 杀死进程</li></ul><h4 id="2-linux"><a href="#2-linux" class="headerlink" title="2) linux"></a>2) <strong>linux</strong></h4><ul><li>ps -fe 查看所有进程</li><li><code>ps -fT -p &lt;PID&gt;</code> 查看某个进程（PID）的所有线程</li><li><code>kill</code> 杀死进程</li><li><code>top</code> 按大写 H 切换是否显示线程</li><li><code>top -H -p &lt;PID&gt;</code> 查看某个进程（PID）的所有线程</li></ul><h4 id="3-Java"><a href="#3-Java" class="headerlink" title="3) Java"></a>3) <strong>Java</strong></h4><ul><li><code>jps</code> 命令查看所有 Java 进程</li><li><code>jstack &lt;PID&gt;</code> 查看某个 Java 进程（PID）的所有线程状态</li><li><code>jconsole</code> 来查看某个 Java 进程中线程的运行情况（图形界面）</li></ul><p>jconsole 远程监控配置</p><ul><li>需要以如下方式运行你的 java 类</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -Djava.rmi.server.hostname=`ip地址` -Dcom.sun.management.jmxremote -<br>Dcom.sun.management.jmxremote.port=`连接端口` -Dcom.sun.management.jmxremote.ssl=是否安全连接 -<br>Dcom.sun.management.jmxremote.authenticate=是否认证 java类<br></code></pre></td></tr></table></figure><ul><li>修改 &#x2F;etc&#x2F;hosts 文件将 127.0.0.1 映射至主机名</li></ul><p>如果要认证访问，还需要做如下步骤</p><ul><li>复制 jmxremote.password 文件</li><li>修改 jmxremote.password 和 jmxremote.access 文件的权限为 600 即文件所有者可读写</li><li>连接时填入 controlRole（用户名），R&amp;D（密码）</li></ul><h3 id="3、线程的几种状态"><a href="#3、线程的几种状态" class="headerlink" title="3、线程的几种状态"></a>3、线程的几种状态</h3><h4 id="1-五种状态"><a href="#1-五种状态" class="headerlink" title="1) 五种状态"></a>1) 五种状态</h4><p><img src="/2023/08/19/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230819191824455.png" alt="image-20230819191824455"></p><ul><li><p>【初始状态】仅是在语言层面创建了线程对象，还未与操作系统线程关联</p></li><li><p>【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行</p></li><li><p>【运行状态】指获取了 CPU 时间片运行中的状态</p><ul><li>当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换</li></ul></li><li><p>【阻塞状态】</p><ul><li><p>如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入【阻塞状态】</p></li><li><p>等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】</p></li><li><p>与【可运行状态】的区别是，对【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们</p></li></ul></li><li><p>【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</p></li></ul><h4 id="2-六种状态"><a href="#2-六种状态" class="headerlink" title="2) 六种状态"></a>2) 六种状态</h4><p><img src="/2023/08/19/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230819191647095.png" alt="image-20230819191647095"></p><ul><li><code>NEW</code> 线程刚被创建，但是还没有调用 start() 方法</li><li><code>RUNNABLE</code> 当调用了 start() 方法之后，注意，Java API 层面的 RUNNABLE 状态涵盖了 操作系统 层面的【可运行状态】、【运行状态】和【阻塞状态】（由于 BIO 导致的线程阻塞，在 Java 里无法区分，仍然认为是可运行）</li><li><code>BLOCKED</code> ， <code>WAITING</code> ， <code>TIMED_WAITING</code> 都是 Java API 层面对【阻塞状态】的细分，后面会在状态转换一节详述</li><li><code>TERMINATED</code> 当线程代码运行结束</li></ul><h2 id="共享模型之管程"><a href="#共享模型之管程" class="headerlink" title="共享模型之管程"></a>共享模型之管程</h2><p>Monitor概念、原理</p><p>Synchronized概念、原理</p><p>锁升级：偏向锁-&gt;轻量级锁-&gt;重量级锁(涉及自旋优化)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;并发编程&quot;&gt;&lt;a href=&quot;#并发编程&quot; class=&quot;headerlink&quot; title=&quot;并发编程&quot;&gt;&lt;/a&gt;并发编程&lt;/h1&gt;&lt;h2 id=&quot;一、进程和线程&quot;&gt;&lt;a href=&quot;#一、进程和线程&quot; class=&quot;headerlink&quot; title=&quot;一、进</summary>
      
    
    
    
    <category term="java学习笔记" scheme="http://lemur9.top/categories/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="并发编程" scheme="http://lemur9.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>缓存问题思考逻辑</title>
    <link href="http://lemur9.top/2023/08/10/%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83%E9%80%BB%E8%BE%91/"/>
    <id>http://lemur9.top/2023/08/10/%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83%E9%80%BB%E8%BE%91/</id>
    <published>2023-08-10T07:50:28.000Z</published>
    <updated>2023-08-10T07:52:50.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存问题思考逻辑"><a href="#缓存问题思考逻辑" class="headerlink" title="缓存问题思考逻辑"></a>缓存问题思考逻辑</h1><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><p>涉及组件：Redis、Redisson、SpringCache</p><h2 id="一、缓存问题"><a href="#一、缓存问题" class="headerlink" title="一、缓存问题"></a>一、缓存问题</h2><ol><li>需要缓存<ul><li>解决方案：加本地缓存</li><li>存在问题：分布式系统无法使用</li></ul></li><li>使用缓存中间件<ul><li>解决方案：使用redis</li><li>存在问题：读模式下存在缓存穿透、雪崩、击穿问题</li></ul></li><li>解决读模式下的问题<ul><li>解决方案：<code>穿透</code>-&gt;缓存null值，<code>雪崩</code>-&gt;添加随机ttl，击穿-&gt;加本地锁</li><li>存在问题：分布式系统中本地锁无法完全锁住</li></ul></li><li>使用分布式锁<ul><li>解决方案：使用redisson</li><li>存在问题：降低效率</li></ul></li></ol><p>&#x3D;&#x3D;———————————————————————-&#x3D;&#x3D;</p><h2 id="二、缓存一致性问题"><a href="#二、缓存一致性问题" class="headerlink" title="二、缓存一致性问题"></a>二、缓存一致性问题</h2><ol><li>数据库和缓存数据需要保证一致<ul><li>解决方案：双写模式、失效模式+随机ttl</li><li>存在问题：可能出现脏读现象</li></ul></li><li>使用读写锁<ul><li>解决方案：使用RReadWriteLock，使用Canal感知数据库更新</li><li>存在问题：写锁阻塞读取操作</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;缓存问题思考逻辑&quot;&gt;&lt;a href=&quot;#缓存问题思考逻辑&quot; class=&quot;headerlink&quot; title=&quot;缓存问题思考逻辑&quot;&gt;&lt;/a&gt;缓存问题思考逻辑&lt;/h1&gt;&lt;h2 id=&quot;工具介绍&quot;&gt;&lt;a href=&quot;#工具介绍&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="java组件" scheme="http://lemur9.top/categories/java%E7%BB%84%E4%BB%B6/"/>
    
    
    <category term="redis缓存" scheme="http://lemur9.top/tags/redis%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>OSS对象存储的使用</title>
    <link href="http://lemur9.top/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://lemur9.top/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2023-06-02T09:06:56.000Z</published>
    <updated>2023-06-02T16:28:27.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OSS对象存储"><a href="#OSS对象存储" class="headerlink" title="OSS对象存储"></a>OSS对象存储</h1><ul><li>适用于分布式系统</li></ul><h2 id="一、准备工作：开启阿里云的对象存储功能"><a href="#一、准备工作：开启阿里云的对象存储功能" class="headerlink" title="一、准备工作：开启阿里云的对象存储功能"></a>一、准备工作：开启阿里云的对象存储功能</h2><h3 id="1-创建阿里云账号，开启-对象存储OSS-功能"><a href="#1-创建阿里云账号，开启-对象存储OSS-功能" class="headerlink" title="1. 创建阿里云账号，开启 对象存储OSS 功能"></a>1. 创建阿里云账号，开启 <em>对象存储OSS</em> 功能</h3><p><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_2.png" alt="开启对象存储OSS功能"></p><h3 id="2-创建一个Bucket，读写权限选择-公共读-即可"><a href="#2-创建一个Bucket，读写权限选择-公共读-即可" class="headerlink" title="2. 创建一个Bucket，读写权限选择 公共读 即可"></a>2. 创建一个Bucket，读写权限选择 <em>公共读</em> 即可</h3><p><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_1.png" alt="创建Bucket"></p><h3 id="3-进入创建好的Bucket，可以选择上传文件进行测试"><a href="#3-进入创建好的Bucket，可以选择上传文件进行测试" class="headerlink" title="3. 进入创建好的Bucket，可以选择上传文件进行测试"></a>3. 进入创建好的Bucket，可以选择上传文件进行测试</h3><p><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img.png" alt="测试上传文件"><br>访问详情中的url即可在线预览</p><h3 id="4-创建子用户，获取AccessKey"><a href="#4-创建子用户，获取AccessKey" class="headerlink" title="4. 创建子用户，获取AccessKey"></a>4. 创建子用户，获取AccessKey</h3><p><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_4.png" alt="img_4.png"><br><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_5.png" alt="img_5.png"><br><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_6.png" alt="img_6.png"><br>记录下AccessKey ID 和 AccessKey Secret</p><h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h3><p>注：这里选错了使用的Gradle，熟悉Maven可以自行使用Maven构建。<br><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_3.png" alt="创建一个SpringBoot项目"></p><h3 id="2-编写资源文件"><a href="#2-编写资源文件" class="headerlink" title="2. 编写资源文件"></a>2. 编写资源文件</h3><p>accessKey对应AccessKey ID <br>secretKey对应AccessKey Secret <br>endpoint对应Bucket概览页中的访问端口的地域节点<br>bucket为对应的bucket<br><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_7.png" alt="资源文件"></p><h3 id="3-简单上传代码实现"><a href="#3-简单上传代码实现" class="headerlink" title="3. 简单上传代码实现"></a>3. 简单上传代码实现</h3><h4 id="OssController"><a href="#OssController" class="headerlink" title="OssController"></a>OssController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;alibaba.cloud&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OssController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String accessKey;<br><br>    <span class="hljs-keyword">private</span> String secretKey;<br><br>    <span class="hljs-keyword">private</span> Oss oss;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Oss</span> &#123;<br>        <span class="hljs-keyword">private</span> String endpoint;<br><br>        <span class="hljs-keyword">private</span> String bucket;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Resource</span><br>    OSS ossClient;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;oss/test&quot;)</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOss</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">// 填写Object完整路径，完整路径中不能包含Bucket名称，例如exampledir/exampleobject.txt。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">objectName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;IMG_2184(20200719-184751).JPG&quot;</span>;<br><br>        String filePath= <span class="hljs-string">&quot;IMG_2184(20200719-184751).JPG&quot;</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> ClassLoader.getSystemResourceAsStream(filePath);<br>            <span class="hljs-comment">// 创建PutObjectRequest对象。</span><br>            <span class="hljs-type">PutObjectRequest</span> <span class="hljs-variable">putObjectRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PutObjectRequest</span>(oss.bucket, objectName, inputStream);<br>            <span class="hljs-comment">// 创建PutObject请求。</span><br>            ossClient.putObject(putObjectRequest);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ConfigurationPropertiesScan</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OssFileUploadApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OssFileUploadApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h4><p><a href="http://localhost:30000/oss/test">http://localhost:30000/oss/test</a> \</p><h3 id="4-查看"><a href="#4-查看" class="headerlink" title="4. 查看"></a>4. 查看</h3><h4 id="点击对应图片的详情按钮，对应URL也可直接访问"><a href="#点击对应图片的详情按钮，对应URL也可直接访问" class="headerlink" title="点击对应图片的详情按钮，对应URL也可直接访问"></a>点击对应图片的详情按钮，对应URL也可直接访问</h4><p><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_10.png" alt="img_10.png"></p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>文件目录 <br><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_9.png" alt="文件目录"> <br>贴上测试图片 <br><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_8.png" alt="测试图片"></p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>此处只做简单测试，具体使用详情可见阿里云官方文档：<a href="https://help.aliyun.com/document_detail/84781.html">https://help.aliyun.com/document_detail/84781.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OSS对象存储&quot;&gt;&lt;a href=&quot;#OSS对象存储&quot; class=&quot;headerlink&quot; title=&quot;OSS对象存储&quot;&gt;&lt;/a&gt;OSS对象存储&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;适用于分布式系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一、准备工作：开启阿里云的对象存</summary>
      
    
    
    
    <category term="java组件" scheme="http://lemur9.top/categories/java%E7%BB%84%E4%BB%B6/"/>
    
    
    <category term="OSS对象存储" scheme="http://lemur9.top/tags/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>小记</title>
    <link href="http://lemur9.top/2023/06/01/%E5%B0%8F%E8%AE%B0/"/>
    <id>http://lemur9.top/2023/06/01/%E5%B0%8F%E8%AE%B0/</id>
    <published>2023-06-01T10:20:42.000Z</published>
    <updated>2023-06-01T10:33:07.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h1><p>记录图片上传方式</p><img src="/2023/06/01/%E5%B0%8F%E8%AE%B0/IMG_2184(20200719-184751).JPG" class="" title="图片引用方法一"><p><img src="/2023/06/01/%E5%B0%8F%E8%AE%B0/IMG_2184(20200719-184751).JPG"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;小记&quot;&gt;&lt;a href=&quot;#小记&quot; class=&quot;headerlink&quot; title=&quot;小记&quot;&gt;&lt;/a&gt;小记&lt;/h1&gt;&lt;p&gt;记录图片上传方式&lt;/p&gt;
&lt;img src=&quot;/2023/06/01/%E5%B0%8F%E8%AE%B0/IMG_2184(2020071</summary>
      
    
    
    
    
  </entry>
  
</feed>
