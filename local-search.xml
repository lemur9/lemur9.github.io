<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>配置logback</title>
    <link href="/2023/08/24/%E9%85%8D%E7%BD%AElogback/"/>
    <url>/2023/08/24/%E9%85%8D%E7%BD%AElogback/</url>
    
    <content type="html"><![CDATA[<h1 id="配置logback（转载）"><a href="#配置logback（转载）" class="headerlink" title="配置logback（转载）"></a>配置logback（转载）</h1><h2 id="一、logack-简介"><a href="#一、logack-简介" class="headerlink" title="一、logack 简介"></a>一、logack 简介</h2><blockquote><p>logback 官网：<a href="https://logback.qos.ch/">https://logback.qos.ch/</a></p></blockquote><p><code>logback</code>和<code>log4j</code>是一个人写的</p><p><code>springboot</code>默认使用的日志框架是<code>logback</code>。</p><ul><li><p>三个模块组成</p><ul><li><p>logback-core</p></li><li><p>logback-classic</p></li><li><p>logback-access</p></li></ul></li></ul><p><code>logback-core</code> 是其它模块的基础设施，其它模块基于它构建，显然，<code>logback-core</code> 提供了一些关键的通用机制。</p><p><code>logback-classic</code> 的地位和作用等同于 <code>Log4J</code>，它也被认为是 <code>Log4J</code> 的一个改进版，并且它实现了简单日志门面 <code>SLF4J</code>；</p><p> <code>logback-access</code> 主要作为一个与 <code>Servlet</code> 容器交互的模块，比如说<code>tomcat</code>或者 <code>jetty</code>，提供一些与 <code>HTTP</code> 访问相关的功能。</p><h2 id="二、配置文件详解"><a href="#二、配置文件详解" class="headerlink" title="二、配置文件详解"></a>二、配置文件详解</h2><h3 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h3><p>先来看这张图，这个结构就是整个logback.xml配置文件的结构。</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164b84acd40e3590tplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>对应来看下配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;60 seconds&quot;</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;glmapper-name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;glmapper-demo&quot;</span> /&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">contextName</span>&gt;</span>$&#123;glmapper-name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">contextName</span>&gt;</span> <br>    <br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span>&gt;</span><br>        //xxxx<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>   <br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span>&gt;</span><br>        //xxxx<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span>             <br>       //xxxx<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>  <br></code></pre></td></tr></table></figure><blockquote><p>ps：想使用spring扩展profile支持，要以logback-spring.xml命名，其他如property需要改为springProperty</p></blockquote><ul><li>scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</li><li>scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</li><li>debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</li></ul><h3 id="contextName"><a href="#contextName" class="headerlink" title="contextName"></a>contextName</h3><p>每个<code>logger</code>都关联到<code>logger</code>上下文，默认上下文名称为<code>“default”</code>。但可以使用<code>contextName</code>标签设置成其他名字，用于区分不同应用程序的记录</p><h3 id="property"><a href="#property" class="headerlink" title="property"></a>property</h3><p>用来定义变量值的标签，<code>property</code>标签有两个属性，<code>name</code>和<code>value</code>；其中<code>name</code>的值是变量的名称，<code>value</code>的值时变量定义的值。通过<code>property</code>定义的值会被插入到<code>logger</code>上下文中。定义变量后，可以使“${name}”来使用变量。如上面的<code>xml</code>所示。</p><h3 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h3><p>用来设置某一个包或者具体的某一个类的日志打印级别以及指定<code>appender</code>。</p><h3 id="root"><a href="#root" class="headerlink" title="root"></a>root</h3><p>根logger，也是一种logger，且只有一个level属性</p><h3 id="appender"><a href="#appender" class="headerlink" title="appender"></a>appender</h3><p>负责写日志的组件，下面会细说</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter其实是appender里面的子元素。它作为过滤器存在，执行一个过滤器会有返回DENY，NEUTRAL，ACCEPT三个枚举值中的一个。</p><ul><li>DENY：日志将立即被抛弃不再经过其他过滤器</li><li>NEUTRAL：有序列表里的下个过滤器过接着处理日志</li><li>ACCEPT：日志会被立即处理，不再经过剩余过滤器</li></ul><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>首先来配置一个非常简单的文件。这里申请下，我使用的是 <code>logback-spring.xml</code>。和 <code>logback.xml</code> 在<code>properties</code>上有略微差别。其他都一样。</p><blockquote><p>工程：springboot+web</p></blockquote><p>先来看下项目目录</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164b8ba7a44783aatplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>properties中就是指定了日志的打印级别和日志的输出位置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#设置应用的日志级别</span><br><span class="hljs-attr">logging.level.com.glmapper.spring.boot</span>=<span class="hljs-string">INFO</span><br><span class="hljs-comment">#路径</span><br><span class="hljs-attr">logging.path</span>=<span class="hljs-string">./logs</span><br></code></pre></td></tr></table></figure><h4 id="通过控制台输出的log"><a href="#通过控制台输出的log" class="headerlink" title="通过控制台输出的log"></a>通过控制台输出的log</h4><h5 id="logback-spring-xml的配置如下："><a href="#logback-spring-xml的配置如下：" class="headerlink" title="logback-spring.xml的配置如下："></a>logback-spring.xml的配置如下：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 默认的控制台日志输出，一般生产环境都是后台启动，这个没太大作用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %-5level %logger&#123;80&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="打印日志的controller"><a href="#打印日志的controller" class="headerlink" title="打印日志的controller"></a>打印日志的controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span><br>LoggerFactory.getLogger(HelloController.class);<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> TestLogService testLogService;<br><br><span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    LOGGER.info(<span class="hljs-string">&quot;GLMAPPER-SERVICE:info&quot;</span>);<br>    LOGGER.error(<span class="hljs-string">&quot;GLMAPPER-SERVICE:error&quot;</span>);<br>    testLogService.printLogToSpecialPackage();<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello spring boot&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="验证结果："><a href="#验证结果：" class="headerlink" title="验证结果："></a>验证结果：</h5><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">01:50:39.633 INFO  com.glmapper.spring.boot.controller.HelloController<br>- GLMAPPER-SERVICE:info<br>01:50:39.633 ERROR com.glmapper.spring.boot.controller.HelloController<br>- GLMAPPER-SERVICE:error<br></code></pre></td></tr></table></figure><p>上面的就是通过控制台打印出来的，这个时候因为我们没有指定日志文件的输出，因为不会在工程目录下生产<code>logs</code>文件夹。</p><h4 id="控制台不打印，直接输出到日志文件"><a href="#控制台不打印，直接输出到日志文件" class="headerlink" title="控制台不打印，直接输出到日志文件"></a>控制台不打印，直接输出到日志文件</h4><h5 id="logback-spring-xml的配置如下：-1"><a href="#logback-spring-xml的配置如下：-1" class="headerlink" title="logback-spring.xml的配置如下："></a>logback-spring.xml的配置如下：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 属性文件:在properties文件中找到对应的配置项 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProperty</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;context&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logging.path&quot;</span>  <span class="hljs-attr">source</span>=<span class="hljs-string">&quot;logging.path&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProperty</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;context&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logging.level&quot;</span> <span class="hljs-attr">source</span>=<span class="hljs-string">&quot;logging.level.com.glmapper.spring.boot&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 默认的控制台日志输出，一般生产环境都是后台启动，这个没太大作用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %-5level %logger&#123;80&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;GLMAPPER-LOGGERONE&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>            $&#123;logging.path&#125;/glmapper-spring-boot/glmapper-loggerone.log<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-loggerone.log.%d&#123;yyyy-MM-dd&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GLMAPPER-LOGGERONE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里我们<code>appender-ref</code>指定的<code>appender</code>是<code>GLMAPPER-LOGGERONE</code>，因为之前没有名字为<code>GLMAPPER-LOGGERONE</code>的<code>appender</code>，所以要增加一个<code>name</code>为<code>GLMAPPER-LOGGERONE</code>的<code>appender</code>。</p><p>注意上面这个配置，我们是直接接将<code>root</code>的<code>appender-ref</code>直接指定到我们的<code>GLMAPPER-LOGGERONE</code>这个appender的。所以控制台中将只会打印出bannar之后就啥也不打印了，所有的启动信息都会被打印在日志文件<code>glmapper-loggerone.log</code>中。</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164b8d8b5f22d274tplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>但是实际上我们不希望我的业务日志中会包括这些启动信息。所以这个时候我们就需要通过<code>logger</code>标签来搞事情了。将上面的配置文件进行简单修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.glmapper.spring.boot.controller&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.level&#125;&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GLMAPPER-LOGGERONE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.level&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>让<code>root</code>指向控制台输出；<code>logger</code>负责打印包<code>com.glmapper.spring.boot.controller</code>下的日志。</p><h5 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h5><p>还是通过我们的测试controller来打印日志为例，但是这里不会在控制台出现日志信息了。期望的日志文件在<code>./logs/glmapper-spring-boot/glmapper-loggerone.log</code>。</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164b8df30b286089tplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><h4 id="logger和appender的关系"><a href="#logger和appender的关系" class="headerlink" title="logger和appender的关系"></a>logger和appender的关系</h4><p>上面两种是一个基本的配置方式，通过上面两个案例，我们先来了解下<code>logger/appender/root</code>之间的关系，然后再详细的说下<code>logger</code>和<code>appender</code>的配置细节。</p><p>在最前面介绍中提到，<code>root</code>是根<code>logger</code>,所以他两是一回事；只不过<code>root</code>中不能有<code>name</code>和<code>additivity</code>属性，是有一个<code>level</code>。</p><p><code>appender</code>是一个日志打印的组件，这里组件里面定义了打印过滤的条件、打印输出方式、滚动策略、编码方式、打印格式等等。但是它仅仅是一个打印组件，如果我们不使用一个<code>logger</code>或者<code>root</code>的<code>appender-ref</code>指定某个具体的<code>appender</code>时，它就没有什么意义。</p><p>因此<code>appender</code>让我们的应用知道怎么打、打印到哪里、打印成什么样；而<code>logger</code>则是告诉应用哪些可以这么打。例如某个类下的日志可以使用这个<code>appender</code>打印或者某个包下的日志可以这么打印。</p><h4 id="appender-配置详解"><a href="#appender-配置详解" class="headerlink" title="appender 配置详解"></a>appender 配置详解</h4><p>这里以上面案例中的名为<code>GLMAPPER-LOGGERONE</code>的<code>appender</code>说明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;GLMAPPER-LOGGERONE&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>        $&#123;logging.path&#125;/glmapper-spring-boot/glmapper-loggerone.log<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-loggerone.log.%d&#123;yyyy-MM-dd&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>appender</code> 有两个属性 <code>name</code>和<code>class</code>;<code>name</code>指定<code>appender</code>名称，<code>class</code>指定<code>appender</code>的全限定名。上面声明的是名为<code>GLMAPPER-LOGGERONE</code>，<code>class</code>为<code>ch.qos.logback.core.rolling.RollingFileAppender</code>的一个<code>appender</code>。</p><h3 id="appender-的种类"><a href="#appender-的种类" class="headerlink" title="appender 的种类"></a>appender 的种类</h3><ul><li>ConsoleAppender：把日志添加到控制台</li><li>FileAppender：把日志添加到文件</li><li>RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。它是FileAppender的子类</li></ul><h3 id="append-子标签"><a href="#append-子标签" class="headerlink" title="append 子标签"></a>append 子标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果是 <code>true</code>，日志被追加到文件结尾，如果是<code>false</code>，清空现存文件，默认是<code>true</code>。</p><h3 id="filter-子标签"><a href="#filter-子标签" class="headerlink" title="filter 子标签"></a>filter 子标签</h3><p>在简介中提到了<code>filter</code>；作用就是上面说的。可以为<code>appender</code> 添加一个或多个过滤器，可以用任意条件对日志进行过滤。<code>appender</code> 有多个过滤器时，按照配置顺序执行。</p><h4 id="ThresholdFilter"><a href="#ThresholdFilter" class="headerlink" title="ThresholdFilter"></a>ThresholdFilter</h4><p>临界值过滤器，过滤掉低于指定临界值的日志。当日志级别等于或高于临界值时，过滤器返回<code>NEUTRAL</code>；当日志级别低于临界值时，日志会被拒绝。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">filter</span> <span class="hljs-keyword">class</span>=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;<br>    &lt;<span class="hljs-keyword">level</span>&gt;<span class="hljs-keyword">INFO</span>&lt;/<span class="hljs-keyword">level</span>&gt;<br>&lt;/<span class="hljs-keyword">filter</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="LevelFilter"><a href="#LevelFilter" class="headerlink" title="LevelFilter"></a>LevelFilter</h4><p>级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据<code>onMath</code>(用于配置符合过滤条件的操作) 和 <code>onMismatch</code>(用于配置不符合过滤条件的操作)接收或拒绝日志。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span>   <br>  <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span>   <br>  <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span>   <br>  <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>关于<code>NEUTRAL</code>、<code>ACCEPT</code>、<code>DENY</code> 见上文简介中关于<code>filter</code>的介绍。</p><h3 id="file-子标签"><a href="#file-子标签" class="headerlink" title="file 子标签"></a>file 子标签</h3><p><code>file</code> 标签用于指定被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>    $&#123;logging.path&#125;/glmapper-spring-boot/glmapper-loggerone.log<br><span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个表示当前appender将会将日志写入到<code>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-loggerone.log</code>这个目录下。</p><h3 id="rollingPolicy-子标签"><a href="#rollingPolicy-子标签" class="headerlink" title="rollingPolicy 子标签"></a>rollingPolicy 子标签</h3><p>这个子标签用来描述滚动策略的。这个只有<code>appender</code>的<code>class</code>是<code>RollingFileAppender</code>时才需要配置。这个也会涉及文件的移动和重命名（a.log-&gt;a.log.2018.07.22）。</p><h4 id="TimeBasedRollingPolicy"><a href="#TimeBasedRollingPolicy" class="headerlink" title="TimeBasedRollingPolicy"></a>TimeBasedRollingPolicy</h4><p>最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。这个下面又包括了两个属性：</p><ul><li>FileNamePattern</li><li>maxHistory</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--日志文件输出的文件名:按天回滚 daily --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span><br>        $&#123;logging.path&#125;/glmapper-spring-boot/glmapper-loggerone.log.%d&#123;yyyy-MM-dd&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的这段配置表明<strong>每天生成一个日志文件，保存30天的日志文件</strong></p><h4 id="FixedWindowRollingPolicy"><a href="#FixedWindowRollingPolicy" class="headerlink" title="FixedWindowRollingPolicy"></a>FixedWindowRollingPolicy</h4><p>根据固定窗口算法重命名文件的滚动策略。</p><h3 id="encoder-子标签"><a href="#encoder-子标签" class="headerlink" title="encoder 子标签"></a>encoder 子标签</h3><p>对记录事件进行格式化。它干了两件事：</p><ul><li>把日志信息转换成字节数组</li><li>把字节数组写入到输出流</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125;<br>    - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br></code></pre></td></tr></table></figure><p>目前<code>encoder</code>只有<code>PatternLayoutEncoder</code>一种类型。</p><h3 id="定义一个只打印error级别日志的appcener"><a href="#定义一个只打印error级别日志的appcener" class="headerlink" title="定义一个只打印error级别日志的appcener"></a>定义一个只打印error级别日志的appcener</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 错误日志 appender ： 按照每天生成日志文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ERROR-APPENDER&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 过滤器，只记录 error 级别的日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 每天生成一个日志文件，保存30天的日志文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出的文件名:按天回滚 daily --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-error.log.%d&#123;yyyy-MM-dd&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="定义一个输出到控制台的appender"><a href="#定义一个输出到控制台的appender" class="headerlink" title="定义一个输出到控制台的appender"></a>定义一个输出到控制台的appender</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 默认的控制台日志输出，一般生产环境都是后台启动，这个没太大作用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %-5level %logger&#123;80&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三、logger-配置详解"><a href="#三、logger-配置详解" class="headerlink" title="三、logger 配置详解"></a>三、logger 配置详解</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.glmapper.spring.boot.controller&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.level&#125;&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GLMAPPER-LOGGERONE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的这个配置文件描述的是：<code>com.glmapper.spring.boot.controller</code>这个包下的<code>$&#123;logging.level&#125;</code>级别的日志将会使用<code>GLMAPPER-LOGGERONE</code>来打印。<code>logger</code>有三个属性和一个子标签：</p><ul><li>name:用来指定受此<code>logger</code>约束的某一个包或者具体的某一个类。</li><li>level:用来设置打印级别（<code>TRACE</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, <code>ALL</code> 和 <code>OFF</code>），还有一个值<code>INHERITED</code>或者同义词<code>NULL</code>，代表强制执行上级的级别。如果没有设置此属性，那么当前<code>logger</code>将会继承上级的级别。</li><li>addtivity:用来描述是否向上级<code>logger</code>传递打印信息。默认是<code>true</code>。</li></ul><p><code>appender-ref</code>则是用来指定具体<code>appender</code>的。</p><h2 id="四、不同日志隔离打印案例"><a href="#四、不同日志隔离打印案例" class="headerlink" title="四、不同日志隔离打印案例"></a>四、不同日志隔离打印案例</h2><p>在前面的例子中我们有三种appender,一个是指定包约束的，一个是控制error级别的，一个是控制台的。然后这小节我们就来实现下不同日志打印到不同的log文件中。</p><h3 id="根据包进行日志文件隔离"><a href="#根据包进行日志文件隔离" class="headerlink" title="根据包进行日志文件隔离"></a>根据包进行日志文件隔离</h3><p>这个例子里我们将<code>com.glmapper.spring.boot.controller</code>中的日志输出到<code>glmapper-controller.log</code>；将<code>com.glmapper.spring.boot.service</code>中的日志输出到<code>glmapper-service.log</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--打印日志到glmapper-service.log的appender--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;GLMAPPER-SERVICE&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>        $&#123;logging.path&#125;/glmapper-spring-boot/glmapper-service.log<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-service.log.%d&#123;yyyy-MM-dd&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--打印日志到glmapper-controller.log的appender--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;GLMAPPER-CONTROLLER&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>        $&#123;logging.path&#125;/glmapper-spring-boot/glmapper-controller.log<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-controller.log.%d&#123;yyyy-MM-dd&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--此logger约束将.controller包下的日志输出到GLMAPPER-CONTROLLER，错误日志输出到GERROR-APPENDE；GERROR-APPENDE见上面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.glmapper.spring.boot.controller&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.level&#125;&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GLMAPPER-CONTROLLER&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GERROR-APPENDER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--此logger约束将.service包下的日志输出到GLMAPPER-SERVICE，错误日志输出到GERROR-APPENDE；GERROR-APPENDE见上面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.glmapper.spring.boot.service&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.level&#125;&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GLMAPPER-SERVICE&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GERROR-APPENDER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br></code></pre></td></tr></table></figure><p>来看运行结果</p><p>1、glmaper-controller</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164bac0d699c0ca9tplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>2、glmapper-service</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164bac127270addftplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>3、glmapper-error</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164bac1698f84f29tplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>满足我们的预期，但是这里有个小问题。在<code>info</code>日志里出现了<code>error</code>,当然这是正常的。假如我们不想在<code>info</code>里面出现<code>error</code>怎么办呢？很简单，我们以<code>APPENDER-SERVICE</code>为例，将<code>filter</code>过滤器进行修改：</p><p>将下面的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果命中就禁止这条日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span>  <br>    <span class="hljs-comment">&lt;!-- 如果没有命中就使用这条规则 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里同时要注意的是，在<code>logger</code>中<code>level</code>需要设置为<code>info</code>级别。</p><h3 id="根据类进行日志文件隔离"><a href="#根据类进行日志文件隔离" class="headerlink" title="根据类进行日志文件隔离"></a>根据类进行日志文件隔离</h3><p>这个其实也是和上面那个差不过，只不过粒度更细一点，一般情况下比如说我们有个定时任务类需要单独来记录其日志信息，这样我们就可以考虑使用基于类维度来约束打印。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--特殊功能单独appender 例如调度类的日志--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SCHEDULERTASKLOCK-APPENDER&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/scheduler-task-lock.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 每天生成一个日志文件，保存30天的日志文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出的文件名:按天回滚 daily --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/scheduler-task-lock.log.%d&#123;yyyy-MM-dd&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--这里指定到了具体的某一个类--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.glmapper.spring.boot.task.TestLogTask&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.level&#125;&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;SCHEDULERTASKLOCK-APPENDER&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR-APPENDER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最终<code>TestLogTask</code>中的日志将会被打印到这个自己独立的log文件中。如下所示：</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164bad7d9e4dd631tplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><h3 id="根据自定义-logger-的-name-进行日志文件隔离"><a href="#根据自定义-logger-的-name-进行日志文件隔离" class="headerlink" title="根据自定义 logger 的 name 进行日志文件隔离"></a>根据自定义 logger 的 name 进行日志文件隔离</h3><p><code>logger</code>的<code>name</code>除了类、包等约束之外，当然还可以这样来玩。。。</p><p>在进行案例之前，这里先把前面案例中<code>logger</code>声明的代码贴一下，以作对比,以<code>TestLogTask</code>类中的日志为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span><br> LoggerFactory.getLogger(TestLogTask.class);<br></code></pre></td></tr></table></figure><p>在<code>getLogger</code>中我们是将当前对象的<code>class</code>作为参数的，这个是为了打印时获取其全限定名的（见下面3-）。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">1-2018-07-21 11:15:42.003 [pool-1-thread-1] <br>2-INFO  <br>3-com.glmapper.spring.boot.task.TestLogTask -<br>4-com.glmapper.spring.boot.task:info<br></code></pre></td></tr></table></figure><h4 id="业务类定义"><a href="#业务类定义" class="headerlink" title="业务类定义"></a>业务类定义</h4><p>我们同样是<code>service</code>包下定义一个类<code>TestLogNameServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.glmapper.spring.boot.service;<br><br><span class="hljs-meta">@Service(&quot;testLogNameService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLogNameServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TestLogNameService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span><br>    LoggerFactory.getLogger(<span class="hljs-string">&quot;GLMAPPER-TEST-LOG&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        LOGGER.info(<span class="hljs-string">&quot;GLMAPPER-TEST-LOG:this is special logger-----info&quot;</span>);<br>        LOGGER.error(<span class="hljs-string">&quot;GLMAPPER-TEST-LOG:this is special logger-------error&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="appender和logger配置"><a href="#appender和logger配置" class="headerlink" title="appender和logger配置"></a>appender和logger配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ROOT-APPENDER&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>$&#123;logging.level&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-test.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 每天生成一个日志文件，保存30天的日志文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出的文件名:按天回滚 daily --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>$&#123;logging.path&#125;/glmapper-spring-boot/glmapper-test.log.%d&#123;yyyy-MM-dd&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--这里的name和业务类中的getLogger中的字符串是一样的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;GLMAPPER-TEST-LOG&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.level&#125;&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ROOT-APPENDER&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR-APPENDER&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们这个预期的是<code>TestLogNameServiceImpl</code>中的日志不打印到<code>glmapper-service.log</code>中，而是打印到<code>glmapper-test.log</code>中。</p><p>1、glmapper-test.log</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164bae82de2d1d6ctplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>2、glmapper-service.log</p><p><img src="/2023/08/24/%E9%85%8D%E7%BD%AElogback/164bae86cb0f9c04tplv-t2oaga2asx-jj-mark3024000q75.webp" alt="img"></p><p>满足我们的预期。</p><h2 id="五、如何使用logback打印mybatis的sql语句"><a href="#五、如何使用logback打印mybatis的sql语句" class="headerlink" title="五、如何使用logback打印mybatis的sql语句"></a>五、如何使用logback打印mybatis的sql语句</h2><p>这个还是比较坑的。为什么。看下这个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;slf4j&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>mybatis-configration.xml</code>中，我们通过这样一个配置项来关联到具体的日志组件。但是<code>logImpl</code>的实现中是没有<code>logback</code>的。那么怎么办呢？这里只能通过<code>slf4j</code>的方式桥接到<code>logback</code>。</p><p>然后在我们的logback-spring.xml中进行如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将sql语句输出到具体的日志文件中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.alipay.sofa.cloudplatform.common.dao&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;$&#123;logging.sql.level&#125;&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;SQL-APPENDER&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里有几个点需要注意的。首先是<code>$&#123;logging.sql.level&#125;</code>这个必须是debug，这个是由mybatis本身实现决定的。而这里的<code>name</code>设定的<code>com.alipay.sofa.cloudplatform.common.dao</code>值就是我们dao接口的包路径。</p><p>网上看了一个比较典型的案例，这种方式只能输出到控制台，并不能将文件输出到日志文件；它是根据内部的一个实现机制偷了个懒。<a href="https://link.juejin.cn/?target=https://blog.csdn.net/xiaoyu411502/article/details/51064885">mybatis用logback日志不显示sql的解决办法</a>。</p><blockquote><p>作者：磊叔的技术博客<br>链接：<a href="https://juejin.cn/post/6844903641535479821">https://juejin.cn/post/6844903641535479821</a><br>来源：稀土掘金</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>logback</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并发编程</title>
    <link href="/2023/08/19/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/08/19/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><h2 id="一、进程和线程"><a href="#一、进程和线程" class="headerlink" title="一、进程和线程"></a>一、进程和线程</h2><h3 id="1、进程"><a href="#1、进程" class="headerlink" title="1、进程"></a>1、进程</h3><ul><li>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的</li><li>当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。</li><li>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器等），也有的程序只能启动一个实例进程（例如网易云音乐、360 安全卫士等）</li></ul><h3 id="2、线程"><a href="#2、线程" class="headerlink" title="2、线程"></a>2、线程</h3><ul><li>一个进程之内可以分为一到多个线程。</li><li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行</li><li>Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。 在 windows 中进程是不活动的，只是作为线程的容器</li></ul><h3 id="3、二者对比"><a href="#3、二者对比" class="headerlink" title="3、二者对比"></a>3、二者对比</h3><ul><li>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集</li><li>进程拥有共享的资源，如内存空间等，供其内部的线程共享</li><li>进程间通信较为复杂<ul><li>同一台计算机的进程通信称为 IPC（Inter-process communication）</li><li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP</li></ul></li><li>线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量</li><li>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</li></ul><h2 id="二、并行与并发"><a href="#二、并行与并发" class="headerlink" title="二、并行与并发"></a>二、并行与并发</h2><p>引用 Rob Pike 的一段描述：</p><ul><li>并发（concurrent）是同一时间应对（dealing with）多件事情的能力</li><li>并行（parallel）是同一时间动手做（doing）多件事情的能力</li></ul><p>例子</p><ul><li>家庭主妇做饭、打扫卫生、给孩子喂奶，她一个人轮流交替做这多件事，这时就是并发</li><li>家庭主妇雇了个保姆，她们一起这些事，这时既有并发，也有并行（这时会产生竞争，例如锅只有一口，一个人用锅时，另一个人就得等待）</li><li>雇了3个保姆，一个专做饭、一个专打扫卫生、一个专喂奶，互不干扰，这时是并行</li></ul><h2 id="三、Java-线程"><a href="#三、Java-线程" class="headerlink" title="三、Java 线程"></a>三、Java 线程</h2><h3 id="1、创建和运行线程的几种方式"><a href="#1、创建和运行线程的几种方式" class="headerlink" title="1、创建和运行线程的几种方式"></a>1、创建和运行线程的几种方式</h3><h4 id="1-直接使用-Thread"><a href="#1-直接使用-Thread" class="headerlink" title="1) 直接使用 Thread"></a>1) 直接使用 Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建线程对象</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 要执行的任务</span><br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 启动线程</span><br>t.start();<br></code></pre></td></tr></table></figure><h4 id="2-使用-Runnable-配合-Thread"><a href="#2-使用-Runnable-配合-Thread" class="headerlink" title="2) 使用 Runnable 配合 Thread"></a>2) 使用 Runnable 配合 Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 要执行的任务</span><br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 创建线程对象</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>( runnable );<br><span class="hljs-comment">// 启动线程</span><br>t.start();<br></code></pre></td></tr></table></figure><h4 id="3-FutureTask-配合-Thread"><a href="#3-FutureTask-配合-Thread" class="headerlink" title="3) FutureTask 配合 Thread"></a>3) FutureTask 配合 Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建任务对象</span><br>FutureTask&lt;Integer&gt; task3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(() -&gt; &#123;<br>    log.debug(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>&#125;);<br><br><span class="hljs-comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task3, <span class="hljs-string">&quot;t3&quot;</span>).start();<br><br><span class="hljs-comment">// 主线程阻塞，同步等待 task 执行完毕的结果</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> task3.get();<br>log.debug(<span class="hljs-string">&quot;结果是:&#123;&#125;&quot;</span>, result);<br></code></pre></td></tr></table></figure><h3 id="2、查看进程线程的方法"><a href="#2、查看进程线程的方法" class="headerlink" title="2、查看进程线程的方法"></a>2、查看进程线程的方法</h3><h4 id="1-windows"><a href="#1-windows" class="headerlink" title="1) windows"></a>1) <strong>windows</strong></h4><ul><li>任务管理器可以查看进程和线程数，也可以用来杀死进程</li><li><code>tasklist</code> 查看进程</li><li><code>taskkill</code> 杀死进程</li></ul><h4 id="2-linux"><a href="#2-linux" class="headerlink" title="2) linux"></a>2) <strong>linux</strong></h4><ul><li>ps -fe 查看所有进程</li><li><code>ps -fT -p &lt;PID&gt;</code> 查看某个进程（PID）的所有线程</li><li><code>kill</code> 杀死进程</li><li><code>top</code> 按大写 H 切换是否显示线程</li><li><code>top -H -p &lt;PID&gt;</code> 查看某个进程（PID）的所有线程</li></ul><h4 id="3-Java"><a href="#3-Java" class="headerlink" title="3) Java"></a>3) <strong>Java</strong></h4><ul><li><code>jps</code> 命令查看所有 Java 进程</li><li><code>jstack &lt;PID&gt;</code> 查看某个 Java 进程（PID）的所有线程状态</li><li><code>jconsole</code> 来查看某个 Java 进程中线程的运行情况（图形界面）</li></ul><p>jconsole 远程监控配置</p><ul><li>需要以如下方式运行你的 java 类</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -Djava.rmi.server.hostname=`ip地址` -Dcom.sun.management.jmxremote -<br>Dcom.sun.management.jmxremote.port=`连接端口` -Dcom.sun.management.jmxremote.ssl=是否安全连接 -<br>Dcom.sun.management.jmxremote.authenticate=是否认证 java类<br></code></pre></td></tr></table></figure><ul><li>修改 &#x2F;etc&#x2F;hosts 文件将 127.0.0.1 映射至主机名</li></ul><p>如果要认证访问，还需要做如下步骤</p><ul><li>复制 jmxremote.password 文件</li><li>修改 jmxremote.password 和 jmxremote.access 文件的权限为 600 即文件所有者可读写</li><li>连接时填入 controlRole（用户名），R&amp;D（密码）</li></ul><h3 id="3、线程的几种状态"><a href="#3、线程的几种状态" class="headerlink" title="3、线程的几种状态"></a>3、线程的几种状态</h3><h4 id="1-五种状态"><a href="#1-五种状态" class="headerlink" title="1) 五种状态"></a>1) 五种状态</h4><p><img src="/2023/08/19/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230819191824455.png" alt="image-20230819191824455"></p><ul><li><p>【初始状态】仅是在语言层面创建了线程对象，还未与操作系统线程关联</p></li><li><p>【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行</p></li><li><p>【运行状态】指获取了 CPU 时间片运行中的状态</p><ul><li>当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换</li></ul></li><li><p>【阻塞状态】</p><ul><li><p>如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入【阻塞状态】</p></li><li><p>等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】</p></li><li><p>与【可运行状态】的区别是，对【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们</p></li></ul></li><li><p>【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</p></li></ul><h4 id="2-六种状态"><a href="#2-六种状态" class="headerlink" title="2) 六种状态"></a>2) 六种状态</h4><p><img src="/2023/08/19/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230819191647095.png" alt="image-20230819191647095"></p><ul><li><code>NEW</code> 线程刚被创建，但是还没有调用 start() 方法</li><li><code>RUNNABLE</code> 当调用了 start() 方法之后，注意，Java API 层面的 RUNNABLE 状态涵盖了 操作系统 层面的【可运行状态】、【运行状态】和【阻塞状态】（由于 BIO 导致的线程阻塞，在 Java 里无法区分，仍然认为是可运行）</li><li><code>BLOCKED</code> ， <code>WAITING</code> ， <code>TIMED_WAITING</code> 都是 Java API 层面对【阻塞状态】的细分，后面会在状态转换一节详述</li><li><code>TERMINATED</code> 当线程代码运行结束</li></ul><h2 id="共享模型之管程"><a href="#共享模型之管程" class="headerlink" title="共享模型之管程"></a>共享模型之管程</h2><p>Monitor概念、原理</p><p>Synchronized概念、原理</p><p>锁升级：偏向锁-&gt;轻量级锁-&gt;重量级锁(涉及自旋优化)</p>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缓存问题思考逻辑</title>
    <link href="/2023/08/10/%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83%E9%80%BB%E8%BE%91/"/>
    <url>/2023/08/10/%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83%E9%80%BB%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<h1 id="缓存问题思考逻辑"><a href="#缓存问题思考逻辑" class="headerlink" title="缓存问题思考逻辑"></a>缓存问题思考逻辑</h1><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><p>涉及组件：Redis、Redisson、SpringCache</p><h2 id="一、缓存问题"><a href="#一、缓存问题" class="headerlink" title="一、缓存问题"></a>一、缓存问题</h2><ol><li>需要缓存<ul><li>解决方案：加本地缓存</li><li>存在问题：分布式系统无法使用</li></ul></li><li>使用缓存中间件<ul><li>解决方案：使用redis</li><li>存在问题：读模式下存在缓存穿透、雪崩、击穿问题</li></ul></li><li>解决读模式下的问题<ul><li>解决方案：<code>穿透</code>-&gt;缓存null值，<code>雪崩</code>-&gt;添加随机ttl，击穿-&gt;加本地锁</li><li>存在问题：分布式系统中本地锁无法完全锁住</li></ul></li><li>使用分布式锁<ul><li>解决方案：使用redisson</li><li>存在问题：降低效率</li></ul></li></ol><p>&#x3D;&#x3D;———————————————————————-&#x3D;&#x3D;</p><h2 id="二、缓存一致性问题"><a href="#二、缓存一致性问题" class="headerlink" title="二、缓存一致性问题"></a>二、缓存一致性问题</h2><ol><li>数据库和缓存数据需要保证一致<ul><li>解决方案：双写模式、失效模式+随机ttl</li><li>存在问题：可能出现脏读现象</li></ul></li><li>使用读写锁<ul><li>解决方案：使用RReadWriteLock，使用Canal感知数据库更新</li><li>存在问题：写锁阻塞读取操作</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>java组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OSS对象存储的使用</title>
    <link href="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="OSS对象存储"><a href="#OSS对象存储" class="headerlink" title="OSS对象存储"></a>OSS对象存储</h1><ul><li>适用于分布式系统</li></ul><h2 id="一、准备工作：开启阿里云的对象存储功能"><a href="#一、准备工作：开启阿里云的对象存储功能" class="headerlink" title="一、准备工作：开启阿里云的对象存储功能"></a>一、准备工作：开启阿里云的对象存储功能</h2><h3 id="1-创建阿里云账号，开启-对象存储OSS-功能"><a href="#1-创建阿里云账号，开启-对象存储OSS-功能" class="headerlink" title="1. 创建阿里云账号，开启 对象存储OSS 功能"></a>1. 创建阿里云账号，开启 <em>对象存储OSS</em> 功能</h3><p><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_2.png" alt="开启对象存储OSS功能"></p><h3 id="2-创建一个Bucket，读写权限选择-公共读-即可"><a href="#2-创建一个Bucket，读写权限选择-公共读-即可" class="headerlink" title="2. 创建一个Bucket，读写权限选择 公共读 即可"></a>2. 创建一个Bucket，读写权限选择 <em>公共读</em> 即可</h3><p><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_1.png" alt="创建Bucket"></p><h3 id="3-进入创建好的Bucket，可以选择上传文件进行测试"><a href="#3-进入创建好的Bucket，可以选择上传文件进行测试" class="headerlink" title="3. 进入创建好的Bucket，可以选择上传文件进行测试"></a>3. 进入创建好的Bucket，可以选择上传文件进行测试</h3><p><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img.png" alt="测试上传文件"><br>访问详情中的url即可在线预览</p><h3 id="4-创建子用户，获取AccessKey"><a href="#4-创建子用户，获取AccessKey" class="headerlink" title="4. 创建子用户，获取AccessKey"></a>4. 创建子用户，获取AccessKey</h3><p><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_4.png" alt="img_4.png"><br><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_5.png" alt="img_5.png"><br><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_6.png" alt="img_6.png"><br>记录下AccessKey ID 和 AccessKey Secret</p><h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h3><p>注：这里选错了使用的Gradle，熟悉Maven可以自行使用Maven构建。<br><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_3.png" alt="创建一个SpringBoot项目"></p><h3 id="2-编写资源文件"><a href="#2-编写资源文件" class="headerlink" title="2. 编写资源文件"></a>2. 编写资源文件</h3><p>accessKey对应AccessKey ID <br>secretKey对应AccessKey Secret <br>endpoint对应Bucket概览页中的访问端口的地域节点<br>bucket为对应的bucket<br><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_7.png" alt="资源文件"></p><h3 id="3-简单上传代码实现"><a href="#3-简单上传代码实现" class="headerlink" title="3. 简单上传代码实现"></a>3. 简单上传代码实现</h3><h4 id="OssController"><a href="#OssController" class="headerlink" title="OssController"></a>OssController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;alibaba.cloud&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OssController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String accessKey;<br><br>    <span class="hljs-keyword">private</span> String secretKey;<br><br>    <span class="hljs-keyword">private</span> Oss oss;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Oss</span> &#123;<br>        <span class="hljs-keyword">private</span> String endpoint;<br><br>        <span class="hljs-keyword">private</span> String bucket;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Resource</span><br>    OSS ossClient;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;oss/test&quot;)</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOss</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">// 填写Object完整路径，完整路径中不能包含Bucket名称，例如exampledir/exampleobject.txt。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">objectName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;IMG_2184(20200719-184751).JPG&quot;</span>;<br><br>        String filePath= <span class="hljs-string">&quot;IMG_2184(20200719-184751).JPG&quot;</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> ClassLoader.getSystemResourceAsStream(filePath);<br>            <span class="hljs-comment">// 创建PutObjectRequest对象。</span><br>            <span class="hljs-type">PutObjectRequest</span> <span class="hljs-variable">putObjectRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PutObjectRequest</span>(oss.bucket, objectName, inputStream);<br>            <span class="hljs-comment">// 创建PutObject请求。</span><br>            ossClient.putObject(putObjectRequest);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ConfigurationPropertiesScan</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OssFileUploadApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OssFileUploadApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h4><p><a href="http://localhost:30000/oss/test">http://localhost:30000/oss/test</a> \</p><h3 id="4-查看"><a href="#4-查看" class="headerlink" title="4. 查看"></a>4. 查看</h3><h4 id="点击对应图片的详情按钮，对应URL也可直接访问"><a href="#点击对应图片的详情按钮，对应URL也可直接访问" class="headerlink" title="点击对应图片的详情按钮，对应URL也可直接访问"></a>点击对应图片的详情按钮，对应URL也可直接访问</h4><p><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_10.png" alt="img_10.png"></p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>文件目录 <br><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_9.png" alt="文件目录"> <br>贴上测试图片 <br><img src="/2023/06/02/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%BF%E7%94%A8/img_8.png" alt="测试图片"></p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>此处只做简单测试，具体使用详情可见阿里云官方文档：<a href="https://help.aliyun.com/document_detail/84781.html">https://help.aliyun.com/document_detail/84781.html</a></p>]]></content>
    
    
    <categories>
      
      <category>java组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OSS对象存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小记</title>
    <link href="/2023/06/01/%E5%B0%8F%E8%AE%B0/"/>
    <url>/2023/06/01/%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h1><p>记录图片上传方式</p><img src="/2023/06/01/%E5%B0%8F%E8%AE%B0/IMG_2184(20200719-184751).JPG" class="" title="图片引用方法一"><p><img src="/2023/06/01/%E5%B0%8F%E8%AE%B0/IMG_2184(20200719-184751).JPG"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
